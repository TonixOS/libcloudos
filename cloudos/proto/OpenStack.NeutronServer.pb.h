// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OpenStack.NeutronServer.proto

#ifndef PROTOBUF_OpenStack_2eNeutronServer_2eproto__INCLUDED
#define PROTOBUF_OpenStack_2eNeutronServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "OS.Network.pb.h"
// @@protoc_insertion_point(includes)

namespace cloudos {
namespace config {
namespace openstack {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_OpenStack_2eNeutronServer_2eproto();
void protobuf_AssignDesc_OpenStack_2eNeutronServer_2eproto();
void protobuf_ShutdownFile_OpenStack_2eNeutronServer_2eproto();

class NeutronServer;

// ===================================================================

class NeutronServer : public ::google::protobuf::Message {
 public:
  NeutronServer();
  virtual ~NeutronServer();
  
  NeutronServer(const NeutronServer& from);
  
  inline NeutronServer& operator=(const NeutronServer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NeutronServer& default_instance();
  
  void Swap(NeutronServer* other);
  
  // implements Message ----------------------------------------------
  
  NeutronServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NeutronServer& from);
  void MergeFrom(const NeutronServer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string host_ip = 2;
  inline bool has_host_ip() const;
  inline void clear_host_ip();
  static const int kHostIpFieldNumber = 2;
  inline const ::std::string& host_ip() const;
  inline void set_host_ip(const ::std::string& value);
  inline void set_host_ip(const char* value);
  inline void set_host_ip(const char* value, size_t size);
  inline ::std::string* mutable_host_ip();
  inline ::std::string* release_host_ip();
  
  // optional string public_ip_pool = 6;
  inline bool has_public_ip_pool() const;
  inline void clear_public_ip_pool();
  static const int kPublicIpPoolFieldNumber = 6;
  inline const ::std::string& public_ip_pool() const;
  inline void set_public_ip_pool(const ::std::string& value);
  inline void set_public_ip_pool(const char* value);
  inline void set_public_ip_pool(const char* value, size_t size);
  inline ::std::string* mutable_public_ip_pool();
  inline ::std::string* release_public_ip_pool();
  
  // optional .cloudos.config.os.SSLSettings ssl_settings = 20;
  inline bool has_ssl_settings() const;
  inline void clear_ssl_settings();
  static const int kSslSettingsFieldNumber = 20;
  inline const ::cloudos::config::os::SSLSettings& ssl_settings() const;
  inline ::cloudos::config::os::SSLSettings* mutable_ssl_settings();
  inline ::cloudos::config::os::SSLSettings* release_ssl_settings();
  
  // @@protoc_insertion_point(class_scope:cloudos.config.openstack.NeutronServer)
 private:
  inline void set_has_host_ip();
  inline void clear_has_host_ip();
  inline void set_has_public_ip_pool();
  inline void clear_has_public_ip_pool();
  inline void set_has_ssl_settings();
  inline void clear_has_ssl_settings();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* host_ip_;
  ::std::string* public_ip_pool_;
  ::cloudos::config::os::SSLSettings* ssl_settings_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_OpenStack_2eNeutronServer_2eproto();
  friend void protobuf_AssignDesc_OpenStack_2eNeutronServer_2eproto();
  friend void protobuf_ShutdownFile_OpenStack_2eNeutronServer_2eproto();
  
  void InitAsDefaultInstance();
  static NeutronServer* default_instance_;
};
// ===================================================================


// ===================================================================

// NeutronServer

// optional string host_ip = 2;
inline bool NeutronServer::has_host_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NeutronServer::set_has_host_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NeutronServer::clear_has_host_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NeutronServer::clear_host_ip() {
  if (host_ip_ != &::google::protobuf::internal::kEmptyString) {
    host_ip_->clear();
  }
  clear_has_host_ip();
}
inline const ::std::string& NeutronServer::host_ip() const {
  return *host_ip_;
}
inline void NeutronServer::set_host_ip(const ::std::string& value) {
  set_has_host_ip();
  if (host_ip_ == &::google::protobuf::internal::kEmptyString) {
    host_ip_ = new ::std::string;
  }
  host_ip_->assign(value);
}
inline void NeutronServer::set_host_ip(const char* value) {
  set_has_host_ip();
  if (host_ip_ == &::google::protobuf::internal::kEmptyString) {
    host_ip_ = new ::std::string;
  }
  host_ip_->assign(value);
}
inline void NeutronServer::set_host_ip(const char* value, size_t size) {
  set_has_host_ip();
  if (host_ip_ == &::google::protobuf::internal::kEmptyString) {
    host_ip_ = new ::std::string;
  }
  host_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NeutronServer::mutable_host_ip() {
  set_has_host_ip();
  if (host_ip_ == &::google::protobuf::internal::kEmptyString) {
    host_ip_ = new ::std::string;
  }
  return host_ip_;
}
inline ::std::string* NeutronServer::release_host_ip() {
  clear_has_host_ip();
  if (host_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_ip_;
    host_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string public_ip_pool = 6;
inline bool NeutronServer::has_public_ip_pool() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NeutronServer::set_has_public_ip_pool() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NeutronServer::clear_has_public_ip_pool() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NeutronServer::clear_public_ip_pool() {
  if (public_ip_pool_ != &::google::protobuf::internal::kEmptyString) {
    public_ip_pool_->clear();
  }
  clear_has_public_ip_pool();
}
inline const ::std::string& NeutronServer::public_ip_pool() const {
  return *public_ip_pool_;
}
inline void NeutronServer::set_public_ip_pool(const ::std::string& value) {
  set_has_public_ip_pool();
  if (public_ip_pool_ == &::google::protobuf::internal::kEmptyString) {
    public_ip_pool_ = new ::std::string;
  }
  public_ip_pool_->assign(value);
}
inline void NeutronServer::set_public_ip_pool(const char* value) {
  set_has_public_ip_pool();
  if (public_ip_pool_ == &::google::protobuf::internal::kEmptyString) {
    public_ip_pool_ = new ::std::string;
  }
  public_ip_pool_->assign(value);
}
inline void NeutronServer::set_public_ip_pool(const char* value, size_t size) {
  set_has_public_ip_pool();
  if (public_ip_pool_ == &::google::protobuf::internal::kEmptyString) {
    public_ip_pool_ = new ::std::string;
  }
  public_ip_pool_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NeutronServer::mutable_public_ip_pool() {
  set_has_public_ip_pool();
  if (public_ip_pool_ == &::google::protobuf::internal::kEmptyString) {
    public_ip_pool_ = new ::std::string;
  }
  return public_ip_pool_;
}
inline ::std::string* NeutronServer::release_public_ip_pool() {
  clear_has_public_ip_pool();
  if (public_ip_pool_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = public_ip_pool_;
    public_ip_pool_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .cloudos.config.os.SSLSettings ssl_settings = 20;
inline bool NeutronServer::has_ssl_settings() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NeutronServer::set_has_ssl_settings() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NeutronServer::clear_has_ssl_settings() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NeutronServer::clear_ssl_settings() {
  if (ssl_settings_ != NULL) ssl_settings_->::cloudos::config::os::SSLSettings::Clear();
  clear_has_ssl_settings();
}
inline const ::cloudos::config::os::SSLSettings& NeutronServer::ssl_settings() const {
  return ssl_settings_ != NULL ? *ssl_settings_ : *default_instance_->ssl_settings_;
}
inline ::cloudos::config::os::SSLSettings* NeutronServer::mutable_ssl_settings() {
  set_has_ssl_settings();
  if (ssl_settings_ == NULL) ssl_settings_ = new ::cloudos::config::os::SSLSettings;
  return ssl_settings_;
}
inline ::cloudos::config::os::SSLSettings* NeutronServer::release_ssl_settings() {
  clear_has_ssl_settings();
  ::cloudos::config::os::SSLSettings* temp = ssl_settings_;
  ssl_settings_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace openstack
}  // namespace config
}  // namespace cloudos

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_OpenStack_2eNeutronServer_2eproto__INCLUDED
