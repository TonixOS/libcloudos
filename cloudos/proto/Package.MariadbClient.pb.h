// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Package.MariadbClient.proto

#ifndef PROTOBUF_Package_2eMariadbClient_2eproto__INCLUDED
#define PROTOBUF_Package_2eMariadbClient_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace cloudos {
namespace config {
namespace package {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Package_2eMariadbClient_2eproto();
void protobuf_AssignDesc_Package_2eMariadbClient_2eproto();
void protobuf_ShutdownFile_Package_2eMariadbClient_2eproto();

class MariadbClient;

// ===================================================================

class MariadbClient : public ::google::protobuf::Message {
 public:
  MariadbClient();
  virtual ~MariadbClient();
  
  MariadbClient(const MariadbClient& from);
  
  inline MariadbClient& operator=(const MariadbClient& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MariadbClient& default_instance();
  
  void Swap(MariadbClient* other);
  
  // implements Message ----------------------------------------------
  
  MariadbClient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MariadbClient& from);
  void MergeFrom(const MariadbClient& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);
  
  // optional string ip = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  
  // optional string user = 6;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 6;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  
  // optional string password = 8;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 8;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // optional string db = 10;
  inline bool has_db() const;
  inline void clear_db();
  static const int kDbFieldNumber = 10;
  inline const ::std::string& db() const;
  inline void set_db(const ::std::string& value);
  inline void set_db(const char* value);
  inline void set_db(const char* value, size_t size);
  inline ::std::string* mutable_db();
  inline ::std::string* release_db();
  
  // @@protoc_insertion_point(class_scope:cloudos.config.package.MariadbClient)
 private:
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_db();
  inline void clear_has_db();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* ip_;
  ::std::string* user_;
  ::std::string* password_;
  ::std::string* db_;
  ::google::protobuf::uint32 port_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_Package_2eMariadbClient_2eproto();
  friend void protobuf_AssignDesc_Package_2eMariadbClient_2eproto();
  friend void protobuf_ShutdownFile_Package_2eMariadbClient_2eproto();
  
  void InitAsDefaultInstance();
  static MariadbClient* default_instance_;
};
// ===================================================================


// ===================================================================

// MariadbClient

// optional uint32 port = 2;
inline bool MariadbClient::has_port() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MariadbClient::set_has_port() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MariadbClient::clear_has_port() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MariadbClient::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 MariadbClient::port() const {
  return port_;
}
inline void MariadbClient::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// optional string ip = 4;
inline bool MariadbClient::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MariadbClient::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MariadbClient::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MariadbClient::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& MariadbClient::ip() const {
  return *ip_;
}
inline void MariadbClient::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void MariadbClient::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void MariadbClient::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MariadbClient::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* MariadbClient::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string user = 6;
inline bool MariadbClient::has_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MariadbClient::set_has_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MariadbClient::clear_has_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MariadbClient::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& MariadbClient::user() const {
  return *user_;
}
inline void MariadbClient::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void MariadbClient::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void MariadbClient::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MariadbClient::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* MariadbClient::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string password = 8;
inline bool MariadbClient::has_password() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MariadbClient::set_has_password() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MariadbClient::clear_has_password() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MariadbClient::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& MariadbClient::password() const {
  return *password_;
}
inline void MariadbClient::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void MariadbClient::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void MariadbClient::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MariadbClient::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* MariadbClient::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string db = 10;
inline bool MariadbClient::has_db() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MariadbClient::set_has_db() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MariadbClient::clear_has_db() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MariadbClient::clear_db() {
  if (db_ != &::google::protobuf::internal::kEmptyString) {
    db_->clear();
  }
  clear_has_db();
}
inline const ::std::string& MariadbClient::db() const {
  return *db_;
}
inline void MariadbClient::set_db(const ::std::string& value) {
  set_has_db();
  if (db_ == &::google::protobuf::internal::kEmptyString) {
    db_ = new ::std::string;
  }
  db_->assign(value);
}
inline void MariadbClient::set_db(const char* value) {
  set_has_db();
  if (db_ == &::google::protobuf::internal::kEmptyString) {
    db_ = new ::std::string;
  }
  db_->assign(value);
}
inline void MariadbClient::set_db(const char* value, size_t size) {
  set_has_db();
  if (db_ == &::google::protobuf::internal::kEmptyString) {
    db_ = new ::std::string;
  }
  db_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MariadbClient::mutable_db() {
  set_has_db();
  if (db_ == &::google::protobuf::internal::kEmptyString) {
    db_ = new ::std::string;
  }
  return db_;
}
inline ::std::string* MariadbClient::release_db() {
  clear_has_db();
  if (db_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = db_;
    db_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace package
}  // namespace config
}  // namespace cloudos

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Package_2eMariadbClient_2eproto__INCLUDED
