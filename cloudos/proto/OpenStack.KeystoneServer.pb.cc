// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "OpenStack.KeystoneServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cloudos {
namespace config {
namespace openstack {

namespace {

const ::google::protobuf::Descriptor* KeystoneServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeystoneServer_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_OpenStack_2eKeystoneServer_2eproto() {
  protobuf_AddDesc_OpenStack_2eKeystoneServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "OpenStack.KeystoneServer.proto");
  GOOGLE_CHECK(file != NULL);
  KeystoneServer_descriptor_ = file->message_type(0);
  static const int KeystoneServer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeystoneServer, admin_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeystoneServer, ssl_settings_),
  };
  KeystoneServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeystoneServer_descriptor_,
      KeystoneServer::default_instance_,
      KeystoneServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeystoneServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeystoneServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeystoneServer));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_OpenStack_2eKeystoneServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeystoneServer_descriptor_, &KeystoneServer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_OpenStack_2eKeystoneServer_2eproto() {
  delete KeystoneServer::default_instance_;
  delete KeystoneServer_reflection_;
}

void protobuf_AddDesc_OpenStack_2eKeystoneServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cloudos::config::os::protobuf_AddDesc_OS_2eNetwork_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036OpenStack.KeystoneServer.proto\022\030cloudo"
    "s.config.openstack\032\020OS.Network.proto\"[\n\016"
    "KeystoneServer\022\023\n\013admin_token\030\002 \001(\t\0224\n\014s"
    "sl_settings\030\004 \001(\0132\036.cloudos.config.os.SS"
    "LSettings", 169);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "OpenStack.KeystoneServer.proto", &protobuf_RegisterTypes);
  KeystoneServer::default_instance_ = new KeystoneServer();
  KeystoneServer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_OpenStack_2eKeystoneServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_OpenStack_2eKeystoneServer_2eproto {
  StaticDescriptorInitializer_OpenStack_2eKeystoneServer_2eproto() {
    protobuf_AddDesc_OpenStack_2eKeystoneServer_2eproto();
  }
} static_descriptor_initializer_OpenStack_2eKeystoneServer_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int KeystoneServer::kAdminTokenFieldNumber;
const int KeystoneServer::kSslSettingsFieldNumber;
#endif  // !_MSC_VER

KeystoneServer::KeystoneServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeystoneServer::InitAsDefaultInstance() {
  ssl_settings_ = const_cast< ::cloudos::config::os::SSLSettings*>(&::cloudos::config::os::SSLSettings::default_instance());
}

KeystoneServer::KeystoneServer(const KeystoneServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeystoneServer::SharedCtor() {
  _cached_size_ = 0;
  admin_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ssl_settings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeystoneServer::~KeystoneServer() {
  SharedDtor();
}

void KeystoneServer::SharedDtor() {
  if (admin_token_ != &::google::protobuf::internal::kEmptyString) {
    delete admin_token_;
  }
  if (this != default_instance_) {
    delete ssl_settings_;
  }
}

void KeystoneServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeystoneServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeystoneServer_descriptor_;
}

const KeystoneServer& KeystoneServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OpenStack_2eKeystoneServer_2eproto();  return *default_instance_;
}

KeystoneServer* KeystoneServer::default_instance_ = NULL;

KeystoneServer* KeystoneServer::New() const {
  return new KeystoneServer;
}

void KeystoneServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_admin_token()) {
      if (admin_token_ != &::google::protobuf::internal::kEmptyString) {
        admin_token_->clear();
      }
    }
    if (has_ssl_settings()) {
      if (ssl_settings_ != NULL) ssl_settings_->::cloudos::config::os::SSLSettings::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeystoneServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string admin_token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_admin_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->admin_token().data(), this->admin_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ssl_settings;
        break;
      }
      
      // optional .cloudos.config.os.SSLSettings ssl_settings = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ssl_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ssl_settings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeystoneServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string admin_token = 2;
  if (has_admin_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->admin_token().data(), this->admin_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->admin_token(), output);
  }
  
  // optional .cloudos.config.os.SSLSettings ssl_settings = 4;
  if (has_ssl_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ssl_settings(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeystoneServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string admin_token = 2;
  if (has_admin_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->admin_token().data(), this->admin_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->admin_token(), target);
  }
  
  // optional .cloudos.config.os.SSLSettings ssl_settings = 4;
  if (has_ssl_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ssl_settings(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeystoneServer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string admin_token = 2;
    if (has_admin_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->admin_token());
    }
    
    // optional .cloudos.config.os.SSLSettings ssl_settings = 4;
    if (has_ssl_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ssl_settings());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeystoneServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeystoneServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeystoneServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeystoneServer::MergeFrom(const KeystoneServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_admin_token()) {
      set_admin_token(from.admin_token());
    }
    if (from.has_ssl_settings()) {
      mutable_ssl_settings()->::cloudos::config::os::SSLSettings::MergeFrom(from.ssl_settings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeystoneServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeystoneServer::CopyFrom(const KeystoneServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeystoneServer::IsInitialized() const {
  
  return true;
}

void KeystoneServer::Swap(KeystoneServer* other) {
  if (other != this) {
    std::swap(admin_token_, other->admin_token_);
    std::swap(ssl_settings_, other->ssl_settings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeystoneServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeystoneServer_descriptor_;
  metadata.reflection = KeystoneServer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace openstack
}  // namespace config
}  // namespace cloudos

// @@protoc_insertion_point(global_scope)
