// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OpenStack.KeystoneServer.proto

#ifndef PROTOBUF_OpenStack_2eKeystoneServer_2eproto__INCLUDED
#define PROTOBUF_OpenStack_2eKeystoneServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "OS.Network.pb.h"
// @@protoc_insertion_point(includes)

namespace cloudos {
namespace config {
namespace openstack {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_OpenStack_2eKeystoneServer_2eproto();
void protobuf_AssignDesc_OpenStack_2eKeystoneServer_2eproto();
void protobuf_ShutdownFile_OpenStack_2eKeystoneServer_2eproto();

class KeystoneServer;

// ===================================================================

class KeystoneServer : public ::google::protobuf::Message {
 public:
  KeystoneServer();
  virtual ~KeystoneServer();

  KeystoneServer(const KeystoneServer& from);

  inline KeystoneServer& operator=(const KeystoneServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeystoneServer& default_instance();

  void Swap(KeystoneServer* other);

  // implements Message ----------------------------------------------

  KeystoneServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeystoneServer& from);
  void MergeFrom(const KeystoneServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string admin_token = 2;
  inline bool has_admin_token() const;
  inline void clear_admin_token();
  static const int kAdminTokenFieldNumber = 2;
  inline const ::std::string& admin_token() const;
  inline void set_admin_token(const ::std::string& value);
  inline void set_admin_token(const char* value);
  inline void set_admin_token(const char* value, size_t size);
  inline ::std::string* mutable_admin_token();
  inline ::std::string* release_admin_token();
  inline void set_allocated_admin_token(::std::string* admin_token);

  // optional .cloudos.config.os.SSLSettings ssl_settings = 4;
  inline bool has_ssl_settings() const;
  inline void clear_ssl_settings();
  static const int kSslSettingsFieldNumber = 4;
  inline const ::cloudos::config::os::SSLSettings& ssl_settings() const;
  inline ::cloudos::config::os::SSLSettings* mutable_ssl_settings();
  inline ::cloudos::config::os::SSLSettings* release_ssl_settings();
  inline void set_allocated_ssl_settings(::cloudos::config::os::SSLSettings* ssl_settings);

  // @@protoc_insertion_point(class_scope:cloudos.config.openstack.KeystoneServer)
 private:
  inline void set_has_admin_token();
  inline void clear_has_admin_token();
  inline void set_has_ssl_settings();
  inline void clear_has_ssl_settings();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* admin_token_;
  ::cloudos::config::os::SSLSettings* ssl_settings_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_OpenStack_2eKeystoneServer_2eproto();
  friend void protobuf_AssignDesc_OpenStack_2eKeystoneServer_2eproto();
  friend void protobuf_ShutdownFile_OpenStack_2eKeystoneServer_2eproto();

  void InitAsDefaultInstance();
  static KeystoneServer* default_instance_;
};
// ===================================================================


// ===================================================================

// KeystoneServer

// optional string admin_token = 2;
inline bool KeystoneServer::has_admin_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeystoneServer::set_has_admin_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeystoneServer::clear_has_admin_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeystoneServer::clear_admin_token() {
  if (admin_token_ != &::google::protobuf::internal::kEmptyString) {
    admin_token_->clear();
  }
  clear_has_admin_token();
}
inline const ::std::string& KeystoneServer::admin_token() const {
  return *admin_token_;
}
inline void KeystoneServer::set_admin_token(const ::std::string& value) {
  set_has_admin_token();
  if (admin_token_ == &::google::protobuf::internal::kEmptyString) {
    admin_token_ = new ::std::string;
  }
  admin_token_->assign(value);
}
inline void KeystoneServer::set_admin_token(const char* value) {
  set_has_admin_token();
  if (admin_token_ == &::google::protobuf::internal::kEmptyString) {
    admin_token_ = new ::std::string;
  }
  admin_token_->assign(value);
}
inline void KeystoneServer::set_admin_token(const char* value, size_t size) {
  set_has_admin_token();
  if (admin_token_ == &::google::protobuf::internal::kEmptyString) {
    admin_token_ = new ::std::string;
  }
  admin_token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeystoneServer::mutable_admin_token() {
  set_has_admin_token();
  if (admin_token_ == &::google::protobuf::internal::kEmptyString) {
    admin_token_ = new ::std::string;
  }
  return admin_token_;
}
inline ::std::string* KeystoneServer::release_admin_token() {
  clear_has_admin_token();
  if (admin_token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = admin_token_;
    admin_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KeystoneServer::set_allocated_admin_token(::std::string* admin_token) {
  if (admin_token_ != &::google::protobuf::internal::kEmptyString) {
    delete admin_token_;
  }
  if (admin_token) {
    set_has_admin_token();
    admin_token_ = admin_token;
  } else {
    clear_has_admin_token();
    admin_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .cloudos.config.os.SSLSettings ssl_settings = 4;
inline bool KeystoneServer::has_ssl_settings() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeystoneServer::set_has_ssl_settings() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KeystoneServer::clear_has_ssl_settings() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KeystoneServer::clear_ssl_settings() {
  if (ssl_settings_ != NULL) ssl_settings_->::cloudos::config::os::SSLSettings::Clear();
  clear_has_ssl_settings();
}
inline const ::cloudos::config::os::SSLSettings& KeystoneServer::ssl_settings() const {
  return ssl_settings_ != NULL ? *ssl_settings_ : *default_instance_->ssl_settings_;
}
inline ::cloudos::config::os::SSLSettings* KeystoneServer::mutable_ssl_settings() {
  set_has_ssl_settings();
  if (ssl_settings_ == NULL) ssl_settings_ = new ::cloudos::config::os::SSLSettings;
  return ssl_settings_;
}
inline ::cloudos::config::os::SSLSettings* KeystoneServer::release_ssl_settings() {
  clear_has_ssl_settings();
  ::cloudos::config::os::SSLSettings* temp = ssl_settings_;
  ssl_settings_ = NULL;
  return temp;
}
inline void KeystoneServer::set_allocated_ssl_settings(::cloudos::config::os::SSLSettings* ssl_settings) {
  delete ssl_settings_;
  ssl_settings_ = ssl_settings;
  if (ssl_settings) {
    set_has_ssl_settings();
  } else {
    clear_has_ssl_settings();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace openstack
}  // namespace config
}  // namespace cloudos

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_OpenStack_2eKeystoneServer_2eproto__INCLUDED
