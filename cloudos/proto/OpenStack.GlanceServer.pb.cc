// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "OpenStack.GlanceServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cloudos {
namespace config {
namespace openstack {

namespace {

const ::google::protobuf::Descriptor* GlanceServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlanceServer_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_OpenStack_2eGlanceServer_2eproto() {
  protobuf_AddDesc_OpenStack_2eGlanceServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "OpenStack.GlanceServer.proto");
  GOOGLE_CHECK(file != NULL);
  GlanceServer_descriptor_ = file->message_type(0);
  static const int GlanceServer_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlanceServer, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlanceServer, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlanceServer, workers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlanceServer, registry_host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlanceServer, registry_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlanceServer, registry_client_protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlanceServer, ssl_settings_),
  };
  GlanceServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlanceServer_descriptor_,
      GlanceServer::default_instance_,
      GlanceServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlanceServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlanceServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlanceServer));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_OpenStack_2eGlanceServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlanceServer_descriptor_, &GlanceServer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_OpenStack_2eGlanceServer_2eproto() {
  delete GlanceServer::default_instance_;
  delete GlanceServer_reflection_;
}

void protobuf_AddDesc_OpenStack_2eGlanceServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cloudos::config::os::protobuf_AddDesc_OS_2eNetwork_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034OpenStack.GlanceServer.proto\022\030cloudos."
    "config.openstack\032\020OS.Network.proto\"\341\001\n\014G"
    "lanceServer\022\014\n\004host\030\002 \001(\t\022\014\n\004port\030\004 \001(\r\022"
    "\017\n\007workers\030\006 \001(\r\022\025\n\rregistry_host\030\010 \001(\t\022"
    "\025\n\rregistry_port\030\n \001(\r\022@\n\030registry_clien"
    "t_protocol\030\014 \001(\0132\036.cloudos.config.os.Web"
    "Protocol\0224\n\014ssl_settings\030\016 \001(\0132\036.cloudos"
    ".config.os.SSLSettings", 302);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "OpenStack.GlanceServer.proto", &protobuf_RegisterTypes);
  GlanceServer::default_instance_ = new GlanceServer();
  GlanceServer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_OpenStack_2eGlanceServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_OpenStack_2eGlanceServer_2eproto {
  StaticDescriptorInitializer_OpenStack_2eGlanceServer_2eproto() {
    protobuf_AddDesc_OpenStack_2eGlanceServer_2eproto();
  }
} static_descriptor_initializer_OpenStack_2eGlanceServer_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int GlanceServer::kHostFieldNumber;
const int GlanceServer::kPortFieldNumber;
const int GlanceServer::kWorkersFieldNumber;
const int GlanceServer::kRegistryHostFieldNumber;
const int GlanceServer::kRegistryPortFieldNumber;
const int GlanceServer::kRegistryClientProtocolFieldNumber;
const int GlanceServer::kSslSettingsFieldNumber;
#endif  // !_MSC_VER

GlanceServer::GlanceServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlanceServer::InitAsDefaultInstance() {
  registry_client_protocol_ = const_cast< ::cloudos::config::os::WebProtocol*>(&::cloudos::config::os::WebProtocol::default_instance());
  ssl_settings_ = const_cast< ::cloudos::config::os::SSLSettings*>(&::cloudos::config::os::SSLSettings::default_instance());
}

GlanceServer::GlanceServer(const GlanceServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlanceServer::SharedCtor() {
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  workers_ = 0u;
  registry_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  registry_port_ = 0u;
  registry_client_protocol_ = NULL;
  ssl_settings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlanceServer::~GlanceServer() {
  SharedDtor();
}

void GlanceServer::SharedDtor() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (registry_host_ != &::google::protobuf::internal::kEmptyString) {
    delete registry_host_;
  }
  if (this != default_instance_) {
    delete registry_client_protocol_;
    delete ssl_settings_;
  }
}

void GlanceServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlanceServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlanceServer_descriptor_;
}

const GlanceServer& GlanceServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OpenStack_2eGlanceServer_2eproto();  return *default_instance_;
}

GlanceServer* GlanceServer::default_instance_ = NULL;

GlanceServer* GlanceServer::New() const {
  return new GlanceServer;
}

void GlanceServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    port_ = 0u;
    workers_ = 0u;
    if (has_registry_host()) {
      if (registry_host_ != &::google::protobuf::internal::kEmptyString) {
        registry_host_->clear();
      }
    }
    registry_port_ = 0u;
    if (has_registry_client_protocol()) {
      if (registry_client_protocol_ != NULL) registry_client_protocol_->::cloudos::config::os::WebProtocol::Clear();
    }
    if (has_ssl_settings()) {
      if (ssl_settings_ != NULL) ssl_settings_->::cloudos::config::os::SSLSettings::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlanceServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string host = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }
      
      // optional uint32 port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_workers;
        break;
      }
      
      // optional uint32 workers = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_workers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &workers_)));
          set_has_workers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_registry_host;
        break;
      }
      
      // optional string registry_host = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_registry_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_registry_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->registry_host().data(), this->registry_host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_registry_port;
        break;
      }
      
      // optional uint32 registry_port = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_registry_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &registry_port_)));
          set_has_registry_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_registry_client_protocol;
        break;
      }
      
      // optional .cloudos.config.os.WebProtocol registry_client_protocol = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_registry_client_protocol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registry_client_protocol()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_ssl_settings;
        break;
      }
      
      // optional .cloudos.config.os.SSLSettings ssl_settings = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ssl_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ssl_settings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlanceServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string host = 2;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->host(), output);
  }
  
  // optional uint32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }
  
  // optional uint32 workers = 6;
  if (has_workers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->workers(), output);
  }
  
  // optional string registry_host = 8;
  if (has_registry_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->registry_host().data(), this->registry_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->registry_host(), output);
  }
  
  // optional uint32 registry_port = 10;
  if (has_registry_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->registry_port(), output);
  }
  
  // optional .cloudos.config.os.WebProtocol registry_client_protocol = 12;
  if (has_registry_client_protocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->registry_client_protocol(), output);
  }
  
  // optional .cloudos.config.os.SSLSettings ssl_settings = 14;
  if (has_ssl_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->ssl_settings(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlanceServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string host = 2;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host(), target);
  }
  
  // optional uint32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->port(), target);
  }
  
  // optional uint32 workers = 6;
  if (has_workers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->workers(), target);
  }
  
  // optional string registry_host = 8;
  if (has_registry_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->registry_host().data(), this->registry_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->registry_host(), target);
  }
  
  // optional uint32 registry_port = 10;
  if (has_registry_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->registry_port(), target);
  }
  
  // optional .cloudos.config.os.WebProtocol registry_client_protocol = 12;
  if (has_registry_client_protocol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->registry_client_protocol(), target);
  }
  
  // optional .cloudos.config.os.SSLSettings ssl_settings = 14;
  if (has_ssl_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->ssl_settings(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlanceServer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string host = 2;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // optional uint32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }
    
    // optional uint32 workers = 6;
    if (has_workers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->workers());
    }
    
    // optional string registry_host = 8;
    if (has_registry_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->registry_host());
    }
    
    // optional uint32 registry_port = 10;
    if (has_registry_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->registry_port());
    }
    
    // optional .cloudos.config.os.WebProtocol registry_client_protocol = 12;
    if (has_registry_client_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->registry_client_protocol());
    }
    
    // optional .cloudos.config.os.SSLSettings ssl_settings = 14;
    if (has_ssl_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ssl_settings());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlanceServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlanceServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlanceServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlanceServer::MergeFrom(const GlanceServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_workers()) {
      set_workers(from.workers());
    }
    if (from.has_registry_host()) {
      set_registry_host(from.registry_host());
    }
    if (from.has_registry_port()) {
      set_registry_port(from.registry_port());
    }
    if (from.has_registry_client_protocol()) {
      mutable_registry_client_protocol()->::cloudos::config::os::WebProtocol::MergeFrom(from.registry_client_protocol());
    }
    if (from.has_ssl_settings()) {
      mutable_ssl_settings()->::cloudos::config::os::SSLSettings::MergeFrom(from.ssl_settings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlanceServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlanceServer::CopyFrom(const GlanceServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlanceServer::IsInitialized() const {
  
  if (has_registry_client_protocol()) {
    if (!this->registry_client_protocol().IsInitialized()) return false;
  }
  return true;
}

void GlanceServer::Swap(GlanceServer* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    std::swap(workers_, other->workers_);
    std::swap(registry_host_, other->registry_host_);
    std::swap(registry_port_, other->registry_port_);
    std::swap(registry_client_protocol_, other->registry_client_protocol_);
    std::swap(ssl_settings_, other->ssl_settings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlanceServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlanceServer_descriptor_;
  metadata.reflection = GlanceServer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace openstack
}  // namespace config
}  // namespace cloudos

// @@protoc_insertion_point(global_scope)
