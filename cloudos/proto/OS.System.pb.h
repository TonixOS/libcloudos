// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OS.System.proto

#ifndef PROTOBUF_OS_2eSystem_2eproto__INCLUDED
#define PROTOBUF_OS_2eSystem_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace cloudos {
namespace config {
namespace os {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_OS_2eSystem_2eproto();
void protobuf_AssignDesc_OS_2eSystem_2eproto();
void protobuf_ShutdownFile_OS_2eSystem_2eproto();

class System;

// ===================================================================

class System : public ::google::protobuf::Message {
 public:
  System();
  virtual ~System();
  
  System(const System& from);
  
  inline System& operator=(const System& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const System& default_instance();
  
  void Swap(System* other);
  
  // implements Message ----------------------------------------------
  
  System* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const System& from);
  void MergeFrom(const System& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string hostname = 2;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 2;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const char* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  
  // optional string root_password = 4;
  inline bool has_root_password() const;
  inline void clear_root_password();
  static const int kRootPasswordFieldNumber = 4;
  inline const ::std::string& root_password() const;
  inline void set_root_password(const ::std::string& value);
  inline void set_root_password(const char* value);
  inline void set_root_password(const char* value, size_t size);
  inline ::std::string* mutable_root_password();
  inline ::std::string* release_root_password();
  
  // optional string keyboard_layout = 6;
  inline bool has_keyboard_layout() const;
  inline void clear_keyboard_layout();
  static const int kKeyboardLayoutFieldNumber = 6;
  inline const ::std::string& keyboard_layout() const;
  inline void set_keyboard_layout(const ::std::string& value);
  inline void set_keyboard_layout(const char* value);
  inline void set_keyboard_layout(const char* value, size_t size);
  inline ::std::string* mutable_keyboard_layout();
  inline ::std::string* release_keyboard_layout();
  
  // optional string locale_charset = 8;
  inline bool has_locale_charset() const;
  inline void clear_locale_charset();
  static const int kLocaleCharsetFieldNumber = 8;
  inline const ::std::string& locale_charset() const;
  inline void set_locale_charset(const ::std::string& value);
  inline void set_locale_charset(const char* value);
  inline void set_locale_charset(const char* value, size_t size);
  inline ::std::string* mutable_locale_charset();
  inline ::std::string* release_locale_charset();
  
  // @@protoc_insertion_point(class_scope:cloudos.config.os.System)
 private:
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_root_password();
  inline void clear_has_root_password();
  inline void set_has_keyboard_layout();
  inline void clear_has_keyboard_layout();
  inline void set_has_locale_charset();
  inline void clear_has_locale_charset();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* hostname_;
  ::std::string* root_password_;
  ::std::string* keyboard_layout_;
  ::std::string* locale_charset_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_OS_2eSystem_2eproto();
  friend void protobuf_AssignDesc_OS_2eSystem_2eproto();
  friend void protobuf_ShutdownFile_OS_2eSystem_2eproto();
  
  void InitAsDefaultInstance();
  static System* default_instance_;
};
// ===================================================================


// ===================================================================

// System

// optional string hostname = 2;
inline bool System::has_hostname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void System::set_has_hostname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void System::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void System::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& System::hostname() const {
  return *hostname_;
}
inline void System::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void System::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void System::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* System::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}
inline ::std::string* System::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string root_password = 4;
inline bool System::has_root_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void System::set_has_root_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void System::clear_has_root_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void System::clear_root_password() {
  if (root_password_ != &::google::protobuf::internal::kEmptyString) {
    root_password_->clear();
  }
  clear_has_root_password();
}
inline const ::std::string& System::root_password() const {
  return *root_password_;
}
inline void System::set_root_password(const ::std::string& value) {
  set_has_root_password();
  if (root_password_ == &::google::protobuf::internal::kEmptyString) {
    root_password_ = new ::std::string;
  }
  root_password_->assign(value);
}
inline void System::set_root_password(const char* value) {
  set_has_root_password();
  if (root_password_ == &::google::protobuf::internal::kEmptyString) {
    root_password_ = new ::std::string;
  }
  root_password_->assign(value);
}
inline void System::set_root_password(const char* value, size_t size) {
  set_has_root_password();
  if (root_password_ == &::google::protobuf::internal::kEmptyString) {
    root_password_ = new ::std::string;
  }
  root_password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* System::mutable_root_password() {
  set_has_root_password();
  if (root_password_ == &::google::protobuf::internal::kEmptyString) {
    root_password_ = new ::std::string;
  }
  return root_password_;
}
inline ::std::string* System::release_root_password() {
  clear_has_root_password();
  if (root_password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = root_password_;
    root_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string keyboard_layout = 6;
inline bool System::has_keyboard_layout() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void System::set_has_keyboard_layout() {
  _has_bits_[0] |= 0x00000004u;
}
inline void System::clear_has_keyboard_layout() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void System::clear_keyboard_layout() {
  if (keyboard_layout_ != &::google::protobuf::internal::kEmptyString) {
    keyboard_layout_->clear();
  }
  clear_has_keyboard_layout();
}
inline const ::std::string& System::keyboard_layout() const {
  return *keyboard_layout_;
}
inline void System::set_keyboard_layout(const ::std::string& value) {
  set_has_keyboard_layout();
  if (keyboard_layout_ == &::google::protobuf::internal::kEmptyString) {
    keyboard_layout_ = new ::std::string;
  }
  keyboard_layout_->assign(value);
}
inline void System::set_keyboard_layout(const char* value) {
  set_has_keyboard_layout();
  if (keyboard_layout_ == &::google::protobuf::internal::kEmptyString) {
    keyboard_layout_ = new ::std::string;
  }
  keyboard_layout_->assign(value);
}
inline void System::set_keyboard_layout(const char* value, size_t size) {
  set_has_keyboard_layout();
  if (keyboard_layout_ == &::google::protobuf::internal::kEmptyString) {
    keyboard_layout_ = new ::std::string;
  }
  keyboard_layout_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* System::mutable_keyboard_layout() {
  set_has_keyboard_layout();
  if (keyboard_layout_ == &::google::protobuf::internal::kEmptyString) {
    keyboard_layout_ = new ::std::string;
  }
  return keyboard_layout_;
}
inline ::std::string* System::release_keyboard_layout() {
  clear_has_keyboard_layout();
  if (keyboard_layout_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = keyboard_layout_;
    keyboard_layout_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string locale_charset = 8;
inline bool System::has_locale_charset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void System::set_has_locale_charset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void System::clear_has_locale_charset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void System::clear_locale_charset() {
  if (locale_charset_ != &::google::protobuf::internal::kEmptyString) {
    locale_charset_->clear();
  }
  clear_has_locale_charset();
}
inline const ::std::string& System::locale_charset() const {
  return *locale_charset_;
}
inline void System::set_locale_charset(const ::std::string& value) {
  set_has_locale_charset();
  if (locale_charset_ == &::google::protobuf::internal::kEmptyString) {
    locale_charset_ = new ::std::string;
  }
  locale_charset_->assign(value);
}
inline void System::set_locale_charset(const char* value) {
  set_has_locale_charset();
  if (locale_charset_ == &::google::protobuf::internal::kEmptyString) {
    locale_charset_ = new ::std::string;
  }
  locale_charset_->assign(value);
}
inline void System::set_locale_charset(const char* value, size_t size) {
  set_has_locale_charset();
  if (locale_charset_ == &::google::protobuf::internal::kEmptyString) {
    locale_charset_ = new ::std::string;
  }
  locale_charset_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* System::mutable_locale_charset() {
  set_has_locale_charset();
  if (locale_charset_ == &::google::protobuf::internal::kEmptyString) {
    locale_charset_ = new ::std::string;
  }
  return locale_charset_;
}
inline ::std::string* System::release_locale_charset() {
  clear_has_locale_charset();
  if (locale_charset_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = locale_charset_;
    locale_charset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace os
}  // namespace config
}  // namespace cloudos

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_OS_2eSystem_2eproto__INCLUDED
