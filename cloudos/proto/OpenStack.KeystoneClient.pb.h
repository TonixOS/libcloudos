// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OpenStack.KeystoneClient.proto

#ifndef PROTOBUF_OpenStack_2eKeystoneClient_2eproto__INCLUDED
#define PROTOBUF_OpenStack_2eKeystoneClient_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "OS.Network.pb.h"
// @@protoc_insertion_point(includes)

namespace cloudos {
namespace config {
namespace openstack {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_OpenStack_2eKeystoneClient_2eproto();
void protobuf_AssignDesc_OpenStack_2eKeystoneClient_2eproto();
void protobuf_ShutdownFile_OpenStack_2eKeystoneClient_2eproto();

class KeystoneClient;

// ===================================================================

class KeystoneClient : public ::google::protobuf::Message {
 public:
  KeystoneClient();
  virtual ~KeystoneClient();

  KeystoneClient(const KeystoneClient& from);

  inline KeystoneClient& operator=(const KeystoneClient& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeystoneClient& default_instance();

  void Swap(KeystoneClient* other);

  // implements Message ----------------------------------------------

  KeystoneClient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeystoneClient& from);
  void MergeFrom(const KeystoneClient& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string host = 1;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  inline void set_allocated_host(::std::string* host);

  // optional uint32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // optional .cloudos.config.os.WebProtocol protocol = 4;
  inline bool has_protocol() const;
  inline void clear_protocol();
  static const int kProtocolFieldNumber = 4;
  inline const ::cloudos::config::os::WebProtocol& protocol() const;
  inline ::cloudos::config::os::WebProtocol* mutable_protocol();
  inline ::cloudos::config::os::WebProtocol* release_protocol();
  inline void set_allocated_protocol(::cloudos::config::os::WebProtocol* protocol);

  // optional string uri = 6;
  inline bool has_uri() const;
  inline void clear_uri();
  static const int kUriFieldNumber = 6;
  inline const ::std::string& uri() const;
  inline void set_uri(const ::std::string& value);
  inline void set_uri(const char* value);
  inline void set_uri(const char* value, size_t size);
  inline ::std::string* mutable_uri();
  inline ::std::string* release_uri();
  inline void set_allocated_uri(::std::string* uri);

  // optional string admin_tenant_name = 8;
  inline bool has_admin_tenant_name() const;
  inline void clear_admin_tenant_name();
  static const int kAdminTenantNameFieldNumber = 8;
  inline const ::std::string& admin_tenant_name() const;
  inline void set_admin_tenant_name(const ::std::string& value);
  inline void set_admin_tenant_name(const char* value);
  inline void set_admin_tenant_name(const char* value, size_t size);
  inline ::std::string* mutable_admin_tenant_name();
  inline ::std::string* release_admin_tenant_name();
  inline void set_allocated_admin_tenant_name(::std::string* admin_tenant_name);

  // optional string admin_user = 10;
  inline bool has_admin_user() const;
  inline void clear_admin_user();
  static const int kAdminUserFieldNumber = 10;
  inline const ::std::string& admin_user() const;
  inline void set_admin_user(const ::std::string& value);
  inline void set_admin_user(const char* value);
  inline void set_admin_user(const char* value, size_t size);
  inline ::std::string* mutable_admin_user();
  inline ::std::string* release_admin_user();
  inline void set_allocated_admin_user(::std::string* admin_user);

  // optional string admin_password = 12;
  inline bool has_admin_password() const;
  inline void clear_admin_password();
  static const int kAdminPasswordFieldNumber = 12;
  inline const ::std::string& admin_password() const;
  inline void set_admin_password(const ::std::string& value);
  inline void set_admin_password(const char* value);
  inline void set_admin_password(const char* value, size_t size);
  inline ::std::string* mutable_admin_password();
  inline ::std::string* release_admin_password();
  inline void set_allocated_admin_password(::std::string* admin_password);

  // @@protoc_insertion_point(class_scope:cloudos.config.openstack.KeystoneClient)
 private:
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_protocol();
  inline void clear_has_protocol();
  inline void set_has_uri();
  inline void clear_has_uri();
  inline void set_has_admin_tenant_name();
  inline void clear_has_admin_tenant_name();
  inline void set_has_admin_user();
  inline void clear_has_admin_user();
  inline void set_has_admin_password();
  inline void clear_has_admin_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* host_;
  ::cloudos::config::os::WebProtocol* protocol_;
  ::std::string* uri_;
  ::std::string* admin_tenant_name_;
  ::std::string* admin_user_;
  ::std::string* admin_password_;
  ::google::protobuf::uint32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_OpenStack_2eKeystoneClient_2eproto();
  friend void protobuf_AssignDesc_OpenStack_2eKeystoneClient_2eproto();
  friend void protobuf_ShutdownFile_OpenStack_2eKeystoneClient_2eproto();

  void InitAsDefaultInstance();
  static KeystoneClient* default_instance_;
};
// ===================================================================


// ===================================================================

// KeystoneClient

// optional string host = 1;
inline bool KeystoneClient::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeystoneClient::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeystoneClient::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeystoneClient::clear_host() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& KeystoneClient::host() const {
  return *host_;
}
inline void KeystoneClient::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void KeystoneClient::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void KeystoneClient::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeystoneClient::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  return host_;
}
inline ::std::string* KeystoneClient::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KeystoneClient::set_allocated_host(::std::string* host) {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (host) {
    set_has_host();
    host_ = host;
  } else {
    clear_has_host();
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 port = 2;
inline bool KeystoneClient::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeystoneClient::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KeystoneClient::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KeystoneClient::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 KeystoneClient::port() const {
  return port_;
}
inline void KeystoneClient::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// optional .cloudos.config.os.WebProtocol protocol = 4;
inline bool KeystoneClient::has_protocol() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KeystoneClient::set_has_protocol() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KeystoneClient::clear_has_protocol() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KeystoneClient::clear_protocol() {
  if (protocol_ != NULL) protocol_->::cloudos::config::os::WebProtocol::Clear();
  clear_has_protocol();
}
inline const ::cloudos::config::os::WebProtocol& KeystoneClient::protocol() const {
  return protocol_ != NULL ? *protocol_ : *default_instance_->protocol_;
}
inline ::cloudos::config::os::WebProtocol* KeystoneClient::mutable_protocol() {
  set_has_protocol();
  if (protocol_ == NULL) protocol_ = new ::cloudos::config::os::WebProtocol;
  return protocol_;
}
inline ::cloudos::config::os::WebProtocol* KeystoneClient::release_protocol() {
  clear_has_protocol();
  ::cloudos::config::os::WebProtocol* temp = protocol_;
  protocol_ = NULL;
  return temp;
}
inline void KeystoneClient::set_allocated_protocol(::cloudos::config::os::WebProtocol* protocol) {
  delete protocol_;
  protocol_ = protocol;
  if (protocol) {
    set_has_protocol();
  } else {
    clear_has_protocol();
  }
}

// optional string uri = 6;
inline bool KeystoneClient::has_uri() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KeystoneClient::set_has_uri() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KeystoneClient::clear_has_uri() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KeystoneClient::clear_uri() {
  if (uri_ != &::google::protobuf::internal::kEmptyString) {
    uri_->clear();
  }
  clear_has_uri();
}
inline const ::std::string& KeystoneClient::uri() const {
  return *uri_;
}
inline void KeystoneClient::set_uri(const ::std::string& value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
}
inline void KeystoneClient::set_uri(const char* value) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    uri_ = new ::std::string;
  }
  uri_->assign(value);
}
inline void KeystoneClient::set_uri(const char* value, size_t size) {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    uri_ = new ::std::string;
  }
  uri_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeystoneClient::mutable_uri() {
  set_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    uri_ = new ::std::string;
  }
  return uri_;
}
inline ::std::string* KeystoneClient::release_uri() {
  clear_has_uri();
  if (uri_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uri_;
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KeystoneClient::set_allocated_uri(::std::string* uri) {
  if (uri_ != &::google::protobuf::internal::kEmptyString) {
    delete uri_;
  }
  if (uri) {
    set_has_uri();
    uri_ = uri;
  } else {
    clear_has_uri();
    uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string admin_tenant_name = 8;
inline bool KeystoneClient::has_admin_tenant_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KeystoneClient::set_has_admin_tenant_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KeystoneClient::clear_has_admin_tenant_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KeystoneClient::clear_admin_tenant_name() {
  if (admin_tenant_name_ != &::google::protobuf::internal::kEmptyString) {
    admin_tenant_name_->clear();
  }
  clear_has_admin_tenant_name();
}
inline const ::std::string& KeystoneClient::admin_tenant_name() const {
  return *admin_tenant_name_;
}
inline void KeystoneClient::set_admin_tenant_name(const ::std::string& value) {
  set_has_admin_tenant_name();
  if (admin_tenant_name_ == &::google::protobuf::internal::kEmptyString) {
    admin_tenant_name_ = new ::std::string;
  }
  admin_tenant_name_->assign(value);
}
inline void KeystoneClient::set_admin_tenant_name(const char* value) {
  set_has_admin_tenant_name();
  if (admin_tenant_name_ == &::google::protobuf::internal::kEmptyString) {
    admin_tenant_name_ = new ::std::string;
  }
  admin_tenant_name_->assign(value);
}
inline void KeystoneClient::set_admin_tenant_name(const char* value, size_t size) {
  set_has_admin_tenant_name();
  if (admin_tenant_name_ == &::google::protobuf::internal::kEmptyString) {
    admin_tenant_name_ = new ::std::string;
  }
  admin_tenant_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeystoneClient::mutable_admin_tenant_name() {
  set_has_admin_tenant_name();
  if (admin_tenant_name_ == &::google::protobuf::internal::kEmptyString) {
    admin_tenant_name_ = new ::std::string;
  }
  return admin_tenant_name_;
}
inline ::std::string* KeystoneClient::release_admin_tenant_name() {
  clear_has_admin_tenant_name();
  if (admin_tenant_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = admin_tenant_name_;
    admin_tenant_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KeystoneClient::set_allocated_admin_tenant_name(::std::string* admin_tenant_name) {
  if (admin_tenant_name_ != &::google::protobuf::internal::kEmptyString) {
    delete admin_tenant_name_;
  }
  if (admin_tenant_name) {
    set_has_admin_tenant_name();
    admin_tenant_name_ = admin_tenant_name;
  } else {
    clear_has_admin_tenant_name();
    admin_tenant_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string admin_user = 10;
inline bool KeystoneClient::has_admin_user() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void KeystoneClient::set_has_admin_user() {
  _has_bits_[0] |= 0x00000020u;
}
inline void KeystoneClient::clear_has_admin_user() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void KeystoneClient::clear_admin_user() {
  if (admin_user_ != &::google::protobuf::internal::kEmptyString) {
    admin_user_->clear();
  }
  clear_has_admin_user();
}
inline const ::std::string& KeystoneClient::admin_user() const {
  return *admin_user_;
}
inline void KeystoneClient::set_admin_user(const ::std::string& value) {
  set_has_admin_user();
  if (admin_user_ == &::google::protobuf::internal::kEmptyString) {
    admin_user_ = new ::std::string;
  }
  admin_user_->assign(value);
}
inline void KeystoneClient::set_admin_user(const char* value) {
  set_has_admin_user();
  if (admin_user_ == &::google::protobuf::internal::kEmptyString) {
    admin_user_ = new ::std::string;
  }
  admin_user_->assign(value);
}
inline void KeystoneClient::set_admin_user(const char* value, size_t size) {
  set_has_admin_user();
  if (admin_user_ == &::google::protobuf::internal::kEmptyString) {
    admin_user_ = new ::std::string;
  }
  admin_user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeystoneClient::mutable_admin_user() {
  set_has_admin_user();
  if (admin_user_ == &::google::protobuf::internal::kEmptyString) {
    admin_user_ = new ::std::string;
  }
  return admin_user_;
}
inline ::std::string* KeystoneClient::release_admin_user() {
  clear_has_admin_user();
  if (admin_user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = admin_user_;
    admin_user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KeystoneClient::set_allocated_admin_user(::std::string* admin_user) {
  if (admin_user_ != &::google::protobuf::internal::kEmptyString) {
    delete admin_user_;
  }
  if (admin_user) {
    set_has_admin_user();
    admin_user_ = admin_user;
  } else {
    clear_has_admin_user();
    admin_user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string admin_password = 12;
inline bool KeystoneClient::has_admin_password() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void KeystoneClient::set_has_admin_password() {
  _has_bits_[0] |= 0x00000040u;
}
inline void KeystoneClient::clear_has_admin_password() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void KeystoneClient::clear_admin_password() {
  if (admin_password_ != &::google::protobuf::internal::kEmptyString) {
    admin_password_->clear();
  }
  clear_has_admin_password();
}
inline const ::std::string& KeystoneClient::admin_password() const {
  return *admin_password_;
}
inline void KeystoneClient::set_admin_password(const ::std::string& value) {
  set_has_admin_password();
  if (admin_password_ == &::google::protobuf::internal::kEmptyString) {
    admin_password_ = new ::std::string;
  }
  admin_password_->assign(value);
}
inline void KeystoneClient::set_admin_password(const char* value) {
  set_has_admin_password();
  if (admin_password_ == &::google::protobuf::internal::kEmptyString) {
    admin_password_ = new ::std::string;
  }
  admin_password_->assign(value);
}
inline void KeystoneClient::set_admin_password(const char* value, size_t size) {
  set_has_admin_password();
  if (admin_password_ == &::google::protobuf::internal::kEmptyString) {
    admin_password_ = new ::std::string;
  }
  admin_password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeystoneClient::mutable_admin_password() {
  set_has_admin_password();
  if (admin_password_ == &::google::protobuf::internal::kEmptyString) {
    admin_password_ = new ::std::string;
  }
  return admin_password_;
}
inline ::std::string* KeystoneClient::release_admin_password() {
  clear_has_admin_password();
  if (admin_password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = admin_password_;
    admin_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KeystoneClient::set_allocated_admin_password(::std::string* admin_password) {
  if (admin_password_ != &::google::protobuf::internal::kEmptyString) {
    delete admin_password_;
  }
  if (admin_password) {
    set_has_admin_password();
    admin_password_ = admin_password;
  } else {
    clear_has_admin_password();
    admin_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace openstack
}  // namespace config
}  // namespace cloudos

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_OpenStack_2eKeystoneClient_2eproto__INCLUDED
