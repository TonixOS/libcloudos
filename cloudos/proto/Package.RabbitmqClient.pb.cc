// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Package.RabbitmqClient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Package.RabbitmqClient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cloudos {
namespace config {
namespace package {

namespace {

const ::google::protobuf::Descriptor* RabbitmqClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RabbitmqClient_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Package_2eRabbitmqClient_2eproto() {
  protobuf_AddDesc_Package_2eRabbitmqClient_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Package.RabbitmqClient.proto");
  GOOGLE_CHECK(file != NULL);
  RabbitmqClient_descriptor_ = file->message_type(0);
  static const int RabbitmqClient_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RabbitmqClient, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RabbitmqClient, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RabbitmqClient, use_ssl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RabbitmqClient, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RabbitmqClient, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RabbitmqClient, virtual_host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RabbitmqClient, durable_queues_),
  };
  RabbitmqClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RabbitmqClient_descriptor_,
      RabbitmqClient::default_instance_,
      RabbitmqClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RabbitmqClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RabbitmqClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RabbitmqClient));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Package_2eRabbitmqClient_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RabbitmqClient_descriptor_, &RabbitmqClient::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Package_2eRabbitmqClient_2eproto() {
  delete RabbitmqClient::default_instance_;
  delete RabbitmqClient_reflection_;
}

void protobuf_AddDesc_Package_2eRabbitmqClient_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034Package.RabbitmqClient.proto\022\026cloudos."
    "config.package\"\232\001\n\016RabbitmqClient\022\014\n\004hos"
    "t\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\022\025\n\007use_ssl\030\004 \001(\010:\004"
    "true\022\016\n\006userid\030\006 \001(\t\022\020\n\010password\030\010 \001(\t\022\024"
    "\n\014virtual_host\030\n \001(\t\022\035\n\016durable_queues\030\014"
    " \001(\010:\005false", 211);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Package.RabbitmqClient.proto", &protobuf_RegisterTypes);
  RabbitmqClient::default_instance_ = new RabbitmqClient();
  RabbitmqClient::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Package_2eRabbitmqClient_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Package_2eRabbitmqClient_2eproto {
  StaticDescriptorInitializer_Package_2eRabbitmqClient_2eproto() {
    protobuf_AddDesc_Package_2eRabbitmqClient_2eproto();
  }
} static_descriptor_initializer_Package_2eRabbitmqClient_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RabbitmqClient::kHostFieldNumber;
const int RabbitmqClient::kPortFieldNumber;
const int RabbitmqClient::kUseSslFieldNumber;
const int RabbitmqClient::kUseridFieldNumber;
const int RabbitmqClient::kPasswordFieldNumber;
const int RabbitmqClient::kVirtualHostFieldNumber;
const int RabbitmqClient::kDurableQueuesFieldNumber;
#endif  // !_MSC_VER

RabbitmqClient::RabbitmqClient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RabbitmqClient::InitAsDefaultInstance() {
}

RabbitmqClient::RabbitmqClient(const RabbitmqClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RabbitmqClient::SharedCtor() {
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  use_ssl_ = true;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  virtual_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  durable_queues_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RabbitmqClient::~RabbitmqClient() {
  SharedDtor();
}

void RabbitmqClient::SharedDtor() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (virtual_host_ != &::google::protobuf::internal::kEmptyString) {
    delete virtual_host_;
  }
  if (this != default_instance_) {
  }
}

void RabbitmqClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RabbitmqClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RabbitmqClient_descriptor_;
}

const RabbitmqClient& RabbitmqClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Package_2eRabbitmqClient_2eproto();
  return *default_instance_;
}

RabbitmqClient* RabbitmqClient::default_instance_ = NULL;

RabbitmqClient* RabbitmqClient::New() const {
  return new RabbitmqClient;
}

void RabbitmqClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    port_ = 0u;
    use_ssl_ = true;
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_virtual_host()) {
      if (virtual_host_ != &::google::protobuf::internal::kEmptyString) {
        virtual_host_->clear();
      }
    }
    durable_queues_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RabbitmqClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string host = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional uint32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_use_ssl;
        break;
      }

      // optional bool use_ssl = 4 [default = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_ssl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_ssl_)));
          set_has_use_ssl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_userid;
        break;
      }

      // optional string userid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_password;
        break;
      }

      // optional string password = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_virtual_host;
        break;
      }

      // optional string virtual_host = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_virtual_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_virtual_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->virtual_host().data(), this->virtual_host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_durable_queues;
        break;
      }

      // optional bool durable_queues = 12 [default = false];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_durable_queues:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &durable_queues_)));
          set_has_durable_queues();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RabbitmqClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->host(), output);
  }

  // optional uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // optional bool use_ssl = 4 [default = true];
  if (has_use_ssl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->use_ssl(), output);
  }

  // optional string userid = 6;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->userid(), output);
  }

  // optional string password = 8;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->password(), output);
  }

  // optional string virtual_host = 10;
  if (has_virtual_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->virtual_host().data(), this->virtual_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->virtual_host(), output);
  }

  // optional bool durable_queues = 12 [default = false];
  if (has_durable_queues()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->durable_queues(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RabbitmqClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // optional uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // optional bool use_ssl = 4 [default = true];
  if (has_use_ssl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->use_ssl(), target);
  }

  // optional string userid = 6;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->userid(), target);
  }

  // optional string password = 8;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->password(), target);
  }

  // optional string virtual_host = 10;
  if (has_virtual_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->virtual_host().data(), this->virtual_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->virtual_host(), target);
  }

  // optional bool durable_queues = 12 [default = false];
  if (has_durable_queues()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->durable_queues(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RabbitmqClient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string host = 1;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional bool use_ssl = 4 [default = true];
    if (has_use_ssl()) {
      total_size += 1 + 1;
    }

    // optional string userid = 6;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // optional string password = 8;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string virtual_host = 10;
    if (has_virtual_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->virtual_host());
    }

    // optional bool durable_queues = 12 [default = false];
    if (has_durable_queues()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RabbitmqClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RabbitmqClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RabbitmqClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RabbitmqClient::MergeFrom(const RabbitmqClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_use_ssl()) {
      set_use_ssl(from.use_ssl());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_virtual_host()) {
      set_virtual_host(from.virtual_host());
    }
    if (from.has_durable_queues()) {
      set_durable_queues(from.durable_queues());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RabbitmqClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RabbitmqClient::CopyFrom(const RabbitmqClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RabbitmqClient::IsInitialized() const {

  return true;
}

void RabbitmqClient::Swap(RabbitmqClient* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    std::swap(use_ssl_, other->use_ssl_);
    std::swap(userid_, other->userid_);
    std::swap(password_, other->password_);
    std::swap(virtual_host_, other->virtual_host_);
    std::swap(durable_queues_, other->durable_queues_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RabbitmqClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RabbitmqClient_descriptor_;
  metadata.reflection = RabbitmqClient_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace package
}  // namespace config
}  // namespace cloudos

// @@protoc_insertion_point(global_scope)
