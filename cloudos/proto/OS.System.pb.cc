// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "OS.System.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cloudos {
namespace config {
namespace os {

namespace {

const ::google::protobuf::Descriptor* System_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  System_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_OS_2eSystem_2eproto() {
  protobuf_AddDesc_OS_2eSystem_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "OS.System.proto");
  GOOGLE_CHECK(file != NULL);
  System_descriptor_ = file->message_type(0);
  static const int System_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(System, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(System, root_password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(System, keyboard_layout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(System, locale_charset_),
  };
  System_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      System_descriptor_,
      System::default_instance_,
      System_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(System, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(System, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(System));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_OS_2eSystem_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    System_descriptor_, &System::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_OS_2eSystem_2eproto() {
  delete System::default_instance_;
  delete System_reflection_;
}

void protobuf_AddDesc_OS_2eSystem_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017OS.System.proto\022\021cloudos.config.os\"b\n\006"
    "System\022\020\n\010hostname\030\002 \001(\t\022\025\n\rroot_passwor"
    "d\030\004 \001(\t\022\027\n\017keyboard_layout\030\006 \001(\t\022\026\n\016loca"
    "le_charset\030\010 \001(\t", 136);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "OS.System.proto", &protobuf_RegisterTypes);
  System::default_instance_ = new System();
  System::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_OS_2eSystem_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_OS_2eSystem_2eproto {
  StaticDescriptorInitializer_OS_2eSystem_2eproto() {
    protobuf_AddDesc_OS_2eSystem_2eproto();
  }
} static_descriptor_initializer_OS_2eSystem_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int System::kHostnameFieldNumber;
const int System::kRootPasswordFieldNumber;
const int System::kKeyboardLayoutFieldNumber;
const int System::kLocaleCharsetFieldNumber;
#endif  // !_MSC_VER

System::System()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void System::InitAsDefaultInstance() {
}

System::System(const System& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void System::SharedCtor() {
  _cached_size_ = 0;
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  root_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  keyboard_layout_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  locale_charset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

System::~System() {
  SharedDtor();
}

void System::SharedDtor() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (root_password_ != &::google::protobuf::internal::kEmptyString) {
    delete root_password_;
  }
  if (keyboard_layout_ != &::google::protobuf::internal::kEmptyString) {
    delete keyboard_layout_;
  }
  if (locale_charset_ != &::google::protobuf::internal::kEmptyString) {
    delete locale_charset_;
  }
  if (this != default_instance_) {
  }
}

void System::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* System::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return System_descriptor_;
}

const System& System::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OS_2eSystem_2eproto();  return *default_instance_;
}

System* System::default_instance_ = NULL;

System* System::New() const {
  return new System;
}

void System::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    if (has_root_password()) {
      if (root_password_ != &::google::protobuf::internal::kEmptyString) {
        root_password_->clear();
      }
    }
    if (has_keyboard_layout()) {
      if (keyboard_layout_ != &::google::protobuf::internal::kEmptyString) {
        keyboard_layout_->clear();
      }
    }
    if (has_locale_charset()) {
      if (locale_charset_ != &::google::protobuf::internal::kEmptyString) {
        locale_charset_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool System::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hostname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_root_password;
        break;
      }
      
      // optional string root_password = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_root_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_root_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->root_password().data(), this->root_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_keyboard_layout;
        break;
      }
      
      // optional string keyboard_layout = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyboard_layout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyboard_layout()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->keyboard_layout().data(), this->keyboard_layout().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_locale_charset;
        break;
      }
      
      // optional string locale_charset = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_locale_charset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_locale_charset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->locale_charset().data(), this->locale_charset().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void System::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string hostname = 2;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hostname(), output);
  }
  
  // optional string root_password = 4;
  if (has_root_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->root_password().data(), this->root_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->root_password(), output);
  }
  
  // optional string keyboard_layout = 6;
  if (has_keyboard_layout()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyboard_layout().data(), this->keyboard_layout().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->keyboard_layout(), output);
  }
  
  // optional string locale_charset = 8;
  if (has_locale_charset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locale_charset().data(), this->locale_charset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->locale_charset(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* System::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string hostname = 2;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hostname(), target);
  }
  
  // optional string root_password = 4;
  if (has_root_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->root_password().data(), this->root_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->root_password(), target);
  }
  
  // optional string keyboard_layout = 6;
  if (has_keyboard_layout()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->keyboard_layout().data(), this->keyboard_layout().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->keyboard_layout(), target);
  }
  
  // optional string locale_charset = 8;
  if (has_locale_charset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locale_charset().data(), this->locale_charset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->locale_charset(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int System::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string hostname = 2;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }
    
    // optional string root_password = 4;
    if (has_root_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->root_password());
    }
    
    // optional string keyboard_layout = 6;
    if (has_keyboard_layout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->keyboard_layout());
    }
    
    // optional string locale_charset = 8;
    if (has_locale_charset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->locale_charset());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void System::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const System* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const System*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void System::MergeFrom(const System& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_root_password()) {
      set_root_password(from.root_password());
    }
    if (from.has_keyboard_layout()) {
      set_keyboard_layout(from.keyboard_layout());
    }
    if (from.has_locale_charset()) {
      set_locale_charset(from.locale_charset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void System::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void System::CopyFrom(const System& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool System::IsInitialized() const {
  
  return true;
}

void System::Swap(System* other) {
  if (other != this) {
    std::swap(hostname_, other->hostname_);
    std::swap(root_password_, other->root_password_);
    std::swap(keyboard_layout_, other->keyboard_layout_);
    std::swap(locale_charset_, other->locale_charset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata System::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = System_descriptor_;
  metadata.reflection = System_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace os
}  // namespace config
}  // namespace cloudos

// @@protoc_insertion_point(global_scope)
