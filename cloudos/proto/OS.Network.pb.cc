// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "OS.Network.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cloudos {
namespace config {
namespace os {

namespace {

const ::google::protobuf::Descriptor* NetworkRoute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkRoute_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetworkRoute_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NetworkInterface_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetworkInterface_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSHTunnel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSHTunnel_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebProtocol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebProtocol_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* WebProtocol_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SSLSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSLSettings_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_OS_2eNetwork_2eproto() {
  protobuf_AddDesc_OS_2eNetwork_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "OS.Network.proto");
  GOOGLE_CHECK(file != NULL);
  NetworkRoute_descriptor_ = file->message_type(0);
  static const int NetworkRoute_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkRoute, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkRoute, route_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkRoute, gateway_),
  };
  NetworkRoute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetworkRoute_descriptor_,
      NetworkRoute::default_instance_,
      NetworkRoute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkRoute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkRoute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetworkRoute));
  NetworkRoute_Type_descriptor_ = NetworkRoute_descriptor_->enum_type(0);
  NetworkInterface_descriptor_ = file->message_type(1);
  static const int NetworkInterface_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkInterface, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkInterface, ip_cidr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkInterface, dns_server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkInterface, route_),
  };
  NetworkInterface_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetworkInterface_descriptor_,
      NetworkInterface::default_instance_,
      NetworkInterface_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkInterface, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetworkInterface, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetworkInterface));
  SSHTunnel_descriptor_ = file->message_type(2);
  static const int SSHTunnel_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSHTunnel, tunnel_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSHTunnel, local_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSHTunnel, local_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSHTunnel, remote_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSHTunnel, remote_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSHTunnel, remote_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSHTunnel, key_file_),
  };
  SSHTunnel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSHTunnel_descriptor_,
      SSHTunnel::default_instance_,
      SSHTunnel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSHTunnel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSHTunnel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSHTunnel));
  WebProtocol_descriptor_ = file->message_type(3);
  static const int WebProtocol_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebProtocol, type_),
  };
  WebProtocol_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebProtocol_descriptor_,
      WebProtocol::default_instance_,
      WebProtocol_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebProtocol, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebProtocol, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebProtocol));
  WebProtocol_Type_descriptor_ = WebProtocol_descriptor_->enum_type(0);
  SSLSettings_descriptor_ = file->message_type(4);
  static const int SSLSettings_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSLSettings, ca_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSLSettings, cert_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSLSettings, key_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSLSettings, allow_untrusted_),
  };
  SSLSettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SSLSettings_descriptor_,
      SSLSettings::default_instance_,
      SSLSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSLSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSLSettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SSLSettings));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_OS_2eNetwork_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetworkRoute_descriptor_, &NetworkRoute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetworkInterface_descriptor_, &NetworkInterface::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSHTunnel_descriptor_, &SSHTunnel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebProtocol_descriptor_, &WebProtocol::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SSLSettings_descriptor_, &SSLSettings::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_OS_2eNetwork_2eproto() {
  delete NetworkRoute::default_instance_;
  delete NetworkRoute_reflection_;
  delete NetworkInterface::default_instance_;
  delete NetworkInterface_reflection_;
  delete SSHTunnel::default_instance_;
  delete SSHTunnel_reflection_;
  delete WebProtocol::default_instance_;
  delete WebProtocol_reflection_;
  delete SSLSettings::default_instance_;
  delete SSLSettings_reflection_;
}

void protobuf_AddDesc_OS_2eNetwork_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020OS.Network.proto\022\021cloudos.config.os\"\204\001"
    "\n\014NetworkRoute\0227\n\004type\030\002 \001(\0162$.cloudos.c"
    "onfig.os.NetworkRoute.Type:\003VIA\022\020\n\010route"
    "_ip\030\004 \003(\t\022\017\n\007gateway\030\006 \001(\t\"\030\n\004Type\022\007\n\003VI"
    "A\020\000\022\007\n\003DEV\020\001\"u\n\020NetworkInterface\022\014\n\004name"
    "\030\002 \001(\t\022\017\n\007ip_cidr\030\004 \003(\t\022\022\n\ndns_server\030\006 "
    "\003(\t\022.\n\005route\030\n \003(\0132\037.cloudos.config.os.N"
    "etworkRoute\"\246\001\n\tSSHTunnel\022\023\n\013tunnel_name"
    "\030\002 \001(\t\022\033\n\010local_ip\030\004 \001(\t:\t127.0.0.1\022\022\n\nl"
    "ocal_port\030\006 \001(\005\022\021\n\tremote_ip\030\010 \001(\t\022\023\n\013re"
    "mote_port\030\n \001(\005\022\031\n\013remote_user\030\014 \001(\t:\004ro"
    "ot\022\020\n\010key_file\030\024 \001(\t\"d\n\013WebProtocol\0228\n\004t"
    "ype\030\002 \002(\0162#.cloudos.config.os.WebProtoco"
    "l.Type:\005HTTPS\"\033\n\004Type\022\010\n\004HTTP\020\000\022\t\n\005HTTPS"
    "\020\001\"c\n\013SSLSettings\022\017\n\007ca_file\030\002 \001(\t\022\021\n\tce"
    "rt_file\030\004 \001(\t\022\020\n\010key_file\030\006 \001(\t\022\036\n\017allow"
    "_untrusted\030\010 \001(\010:\005false", 663);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "OS.Network.proto", &protobuf_RegisterTypes);
  NetworkRoute::default_instance_ = new NetworkRoute();
  NetworkInterface::default_instance_ = new NetworkInterface();
  SSHTunnel::default_instance_ = new SSHTunnel();
  WebProtocol::default_instance_ = new WebProtocol();
  SSLSettings::default_instance_ = new SSLSettings();
  NetworkRoute::default_instance_->InitAsDefaultInstance();
  NetworkInterface::default_instance_->InitAsDefaultInstance();
  SSHTunnel::default_instance_->InitAsDefaultInstance();
  WebProtocol::default_instance_->InitAsDefaultInstance();
  SSLSettings::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_OS_2eNetwork_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_OS_2eNetwork_2eproto {
  StaticDescriptorInitializer_OS_2eNetwork_2eproto() {
    protobuf_AddDesc_OS_2eNetwork_2eproto();
  }
} static_descriptor_initializer_OS_2eNetwork_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetworkRoute_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkRoute_Type_descriptor_;
}
bool NetworkRoute_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetworkRoute_Type NetworkRoute::VIA;
const NetworkRoute_Type NetworkRoute::DEV;
const NetworkRoute_Type NetworkRoute::Type_MIN;
const NetworkRoute_Type NetworkRoute::Type_MAX;
const int NetworkRoute::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetworkRoute::kTypeFieldNumber;
const int NetworkRoute::kRouteIpFieldNumber;
const int NetworkRoute::kGatewayFieldNumber;
#endif  // !_MSC_VER

NetworkRoute::NetworkRoute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetworkRoute::InitAsDefaultInstance() {
}

NetworkRoute::NetworkRoute(const NetworkRoute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetworkRoute::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  gateway_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetworkRoute::~NetworkRoute() {
  SharedDtor();
}

void NetworkRoute::SharedDtor() {
  if (gateway_ != &::google::protobuf::internal::kEmptyString) {
    delete gateway_;
  }
  if (this != default_instance_) {
  }
}

void NetworkRoute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkRoute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkRoute_descriptor_;
}

const NetworkRoute& NetworkRoute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OS_2eNetwork_2eproto();  return *default_instance_;
}

NetworkRoute* NetworkRoute::default_instance_ = NULL;

NetworkRoute* NetworkRoute::New() const {
  return new NetworkRoute;
}

void NetworkRoute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_gateway()) {
      if (gateway_ != &::google::protobuf::internal::kEmptyString) {
        gateway_->clear();
      }
    }
  }
  route_ip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetworkRoute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cloudos.config.os.NetworkRoute.Type type = 2 [default = VIA];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cloudos::config::os::NetworkRoute_Type_IsValid(value)) {
            set_type(static_cast< ::cloudos::config::os::NetworkRoute_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_route_ip;
        break;
      }
      
      // repeated string route_ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_route_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_route_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->route_ip(0).data(), this->route_ip(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_route_ip;
        if (input->ExpectTag(50)) goto parse_gateway;
        break;
      }
      
      // optional string gateway = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gateway:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gateway()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gateway().data(), this->gateway().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetworkRoute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .cloudos.config.os.NetworkRoute.Type type = 2 [default = VIA];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // repeated string route_ip = 4;
  for (int i = 0; i < this->route_ip_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->route_ip(i).data(), this->route_ip(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->route_ip(i), output);
  }
  
  // optional string gateway = 6;
  if (has_gateway()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gateway().data(), this->gateway().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->gateway(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetworkRoute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .cloudos.config.os.NetworkRoute.Type type = 2 [default = VIA];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // repeated string route_ip = 4;
  for (int i = 0; i < this->route_ip_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->route_ip(i).data(), this->route_ip(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->route_ip(i), target);
  }
  
  // optional string gateway = 6;
  if (has_gateway()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gateway().data(), this->gateway().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->gateway(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetworkRoute::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .cloudos.config.os.NetworkRoute.Type type = 2 [default = VIA];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string gateway = 6;
    if (has_gateway()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gateway());
    }
    
  }
  // repeated string route_ip = 4;
  total_size += 1 * this->route_ip_size();
  for (int i = 0; i < this->route_ip_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->route_ip(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkRoute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetworkRoute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetworkRoute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetworkRoute::MergeFrom(const NetworkRoute& from) {
  GOOGLE_CHECK_NE(&from, this);
  route_ip_.MergeFrom(from.route_ip_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_gateway()) {
      set_gateway(from.gateway());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetworkRoute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkRoute::CopyFrom(const NetworkRoute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkRoute::IsInitialized() const {
  
  return true;
}

void NetworkRoute::Swap(NetworkRoute* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    route_ip_.Swap(&other->route_ip_);
    std::swap(gateway_, other->gateway_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetworkRoute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkRoute_descriptor_;
  metadata.reflection = NetworkRoute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetworkInterface::kNameFieldNumber;
const int NetworkInterface::kIpCidrFieldNumber;
const int NetworkInterface::kDnsServerFieldNumber;
const int NetworkInterface::kRouteFieldNumber;
#endif  // !_MSC_VER

NetworkInterface::NetworkInterface()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetworkInterface::InitAsDefaultInstance() {
}

NetworkInterface::NetworkInterface(const NetworkInterface& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetworkInterface::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetworkInterface::~NetworkInterface() {
  SharedDtor();
}

void NetworkInterface::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void NetworkInterface::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetworkInterface::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetworkInterface_descriptor_;
}

const NetworkInterface& NetworkInterface::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OS_2eNetwork_2eproto();  return *default_instance_;
}

NetworkInterface* NetworkInterface::default_instance_ = NULL;

NetworkInterface* NetworkInterface::New() const {
  return new NetworkInterface;
}

void NetworkInterface::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ip_cidr_.Clear();
  dns_server_.Clear();
  route_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetworkInterface::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip_cidr;
        break;
      }
      
      // repeated string ip_cidr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip_cidr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ip_cidr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip_cidr(0).data(), this->ip_cidr(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip_cidr;
        if (input->ExpectTag(50)) goto parse_dns_server;
        break;
      }
      
      // repeated string dns_server = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dns_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dns_server()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dns_server(0).data(), this->dns_server(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_dns_server;
        if (input->ExpectTag(82)) goto parse_route;
        break;
      }
      
      // repeated .cloudos.config.os.NetworkRoute route = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_route:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_route()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_route;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetworkInterface::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // repeated string ip_cidr = 4;
  for (int i = 0; i < this->ip_cidr_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->ip_cidr(i).data(), this->ip_cidr(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip_cidr(i), output);
  }
  
  // repeated string dns_server = 6;
  for (int i = 0; i < this->dns_server_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->dns_server(i).data(), this->dns_server(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->dns_server(i), output);
  }
  
  // repeated .cloudos.config.os.NetworkRoute route = 10;
  for (int i = 0; i < this->route_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->route(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetworkInterface::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // repeated string ip_cidr = 4;
  for (int i = 0; i < this->ip_cidr_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip_cidr(i).data(), this->ip_cidr(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->ip_cidr(i), target);
  }
  
  // repeated string dns_server = 6;
  for (int i = 0; i < this->dns_server_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dns_server(i).data(), this->dns_server(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->dns_server(i), target);
  }
  
  // repeated .cloudos.config.os.NetworkRoute route = 10;
  for (int i = 0; i < this->route_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->route(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetworkInterface::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  // repeated string ip_cidr = 4;
  total_size += 1 * this->ip_cidr_size();
  for (int i = 0; i < this->ip_cidr_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ip_cidr(i));
  }
  
  // repeated string dns_server = 6;
  total_size += 1 * this->dns_server_size();
  for (int i = 0; i < this->dns_server_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dns_server(i));
  }
  
  // repeated .cloudos.config.os.NetworkRoute route = 10;
  total_size += 1 * this->route_size();
  for (int i = 0; i < this->route_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->route(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkInterface::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetworkInterface* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetworkInterface*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetworkInterface::MergeFrom(const NetworkInterface& from) {
  GOOGLE_CHECK_NE(&from, this);
  ip_cidr_.MergeFrom(from.ip_cidr_);
  dns_server_.MergeFrom(from.dns_server_);
  route_.MergeFrom(from.route_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetworkInterface::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkInterface::CopyFrom(const NetworkInterface& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkInterface::IsInitialized() const {
  
  return true;
}

void NetworkInterface::Swap(NetworkInterface* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    ip_cidr_.Swap(&other->ip_cidr_);
    dns_server_.Swap(&other->dns_server_);
    route_.Swap(&other->route_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetworkInterface::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetworkInterface_descriptor_;
  metadata.reflection = NetworkInterface_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SSHTunnel::_default_local_ip_("127.0.0.1");
const ::std::string SSHTunnel::_default_remote_user_("root");
#ifndef _MSC_VER
const int SSHTunnel::kTunnelNameFieldNumber;
const int SSHTunnel::kLocalIpFieldNumber;
const int SSHTunnel::kLocalPortFieldNumber;
const int SSHTunnel::kRemoteIpFieldNumber;
const int SSHTunnel::kRemotePortFieldNumber;
const int SSHTunnel::kRemoteUserFieldNumber;
const int SSHTunnel::kKeyFileFieldNumber;
#endif  // !_MSC_VER

SSHTunnel::SSHTunnel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSHTunnel::InitAsDefaultInstance() {
}

SSHTunnel::SSHTunnel(const SSHTunnel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSHTunnel::SharedCtor() {
  _cached_size_ = 0;
  tunnel_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  local_ip_ = const_cast< ::std::string*>(&_default_local_ip_);
  local_port_ = 0;
  remote_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  remote_port_ = 0;
  remote_user_ = const_cast< ::std::string*>(&_default_remote_user_);
  key_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSHTunnel::~SSHTunnel() {
  SharedDtor();
}

void SSHTunnel::SharedDtor() {
  if (tunnel_name_ != &::google::protobuf::internal::kEmptyString) {
    delete tunnel_name_;
  }
  if (local_ip_ != &_default_local_ip_) {
    delete local_ip_;
  }
  if (remote_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete remote_ip_;
  }
  if (remote_user_ != &_default_remote_user_) {
    delete remote_user_;
  }
  if (key_file_ != &::google::protobuf::internal::kEmptyString) {
    delete key_file_;
  }
  if (this != default_instance_) {
  }
}

void SSHTunnel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSHTunnel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSHTunnel_descriptor_;
}

const SSHTunnel& SSHTunnel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OS_2eNetwork_2eproto();  return *default_instance_;
}

SSHTunnel* SSHTunnel::default_instance_ = NULL;

SSHTunnel* SSHTunnel::New() const {
  return new SSHTunnel;
}

void SSHTunnel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tunnel_name()) {
      if (tunnel_name_ != &::google::protobuf::internal::kEmptyString) {
        tunnel_name_->clear();
      }
    }
    if (has_local_ip()) {
      if (local_ip_ != &_default_local_ip_) {
        local_ip_->assign(_default_local_ip_);
      }
    }
    local_port_ = 0;
    if (has_remote_ip()) {
      if (remote_ip_ != &::google::protobuf::internal::kEmptyString) {
        remote_ip_->clear();
      }
    }
    remote_port_ = 0;
    if (has_remote_user()) {
      if (remote_user_ != &_default_remote_user_) {
        remote_user_->assign(_default_remote_user_);
      }
    }
    if (has_key_file()) {
      if (key_file_ != &::google::protobuf::internal::kEmptyString) {
        key_file_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSHTunnel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tunnel_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tunnel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tunnel_name().data(), this->tunnel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_local_ip;
        break;
      }
      
      // optional string local_ip = 4 [default = "127.0.0.1"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_local_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->local_ip().data(), this->local_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_local_port;
        break;
      }
      
      // optional int32 local_port = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_local_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &local_port_)));
          set_has_local_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_remote_ip;
        break;
      }
      
      // optional string remote_ip = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remote_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->remote_ip().data(), this->remote_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_remote_port;
        break;
      }
      
      // optional int32 remote_port = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remote_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remote_port_)));
          set_has_remote_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_remote_user;
        break;
      }
      
      // optional string remote_user = 12 [default = "root"];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remote_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->remote_user().data(), this->remote_user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_key_file;
        break;
      }
      
      // optional string key_file = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key_file().data(), this->key_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSHTunnel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string tunnel_name = 2;
  if (has_tunnel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tunnel_name().data(), this->tunnel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tunnel_name(), output);
  }
  
  // optional string local_ip = 4 [default = "127.0.0.1"];
  if (has_local_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_ip().data(), this->local_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->local_ip(), output);
  }
  
  // optional int32 local_port = 6;
  if (has_local_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->local_port(), output);
  }
  
  // optional string remote_ip = 8;
  if (has_remote_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remote_ip().data(), this->remote_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->remote_ip(), output);
  }
  
  // optional int32 remote_port = 10;
  if (has_remote_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->remote_port(), output);
  }
  
  // optional string remote_user = 12 [default = "root"];
  if (has_remote_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remote_user().data(), this->remote_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->remote_user(), output);
  }
  
  // optional string key_file = 20;
  if (has_key_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key_file().data(), this->key_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->key_file(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSHTunnel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string tunnel_name = 2;
  if (has_tunnel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tunnel_name().data(), this->tunnel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tunnel_name(), target);
  }
  
  // optional string local_ip = 4 [default = "127.0.0.1"];
  if (has_local_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->local_ip().data(), this->local_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->local_ip(), target);
  }
  
  // optional int32 local_port = 6;
  if (has_local_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->local_port(), target);
  }
  
  // optional string remote_ip = 8;
  if (has_remote_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remote_ip().data(), this->remote_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->remote_ip(), target);
  }
  
  // optional int32 remote_port = 10;
  if (has_remote_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->remote_port(), target);
  }
  
  // optional string remote_user = 12 [default = "root"];
  if (has_remote_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remote_user().data(), this->remote_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->remote_user(), target);
  }
  
  // optional string key_file = 20;
  if (has_key_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key_file().data(), this->key_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->key_file(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSHTunnel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string tunnel_name = 2;
    if (has_tunnel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tunnel_name());
    }
    
    // optional string local_ip = 4 [default = "127.0.0.1"];
    if (has_local_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->local_ip());
    }
    
    // optional int32 local_port = 6;
    if (has_local_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->local_port());
    }
    
    // optional string remote_ip = 8;
    if (has_remote_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remote_ip());
    }
    
    // optional int32 remote_port = 10;
    if (has_remote_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remote_port());
    }
    
    // optional string remote_user = 12 [default = "root"];
    if (has_remote_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remote_user());
    }
    
    // optional string key_file = 20;
    if (has_key_file()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key_file());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSHTunnel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSHTunnel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSHTunnel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSHTunnel::MergeFrom(const SSHTunnel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tunnel_name()) {
      set_tunnel_name(from.tunnel_name());
    }
    if (from.has_local_ip()) {
      set_local_ip(from.local_ip());
    }
    if (from.has_local_port()) {
      set_local_port(from.local_port());
    }
    if (from.has_remote_ip()) {
      set_remote_ip(from.remote_ip());
    }
    if (from.has_remote_port()) {
      set_remote_port(from.remote_port());
    }
    if (from.has_remote_user()) {
      set_remote_user(from.remote_user());
    }
    if (from.has_key_file()) {
      set_key_file(from.key_file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSHTunnel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSHTunnel::CopyFrom(const SSHTunnel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSHTunnel::IsInitialized() const {
  
  return true;
}

void SSHTunnel::Swap(SSHTunnel* other) {
  if (other != this) {
    std::swap(tunnel_name_, other->tunnel_name_);
    std::swap(local_ip_, other->local_ip_);
    std::swap(local_port_, other->local_port_);
    std::swap(remote_ip_, other->remote_ip_);
    std::swap(remote_port_, other->remote_port_);
    std::swap(remote_user_, other->remote_user_);
    std::swap(key_file_, other->key_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSHTunnel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSHTunnel_descriptor_;
  metadata.reflection = SSHTunnel_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* WebProtocol_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebProtocol_Type_descriptor_;
}
bool WebProtocol_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const WebProtocol_Type WebProtocol::HTTP;
const WebProtocol_Type WebProtocol::HTTPS;
const WebProtocol_Type WebProtocol::Type_MIN;
const WebProtocol_Type WebProtocol::Type_MAX;
const int WebProtocol::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int WebProtocol::kTypeFieldNumber;
#endif  // !_MSC_VER

WebProtocol::WebProtocol()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WebProtocol::InitAsDefaultInstance() {
}

WebProtocol::WebProtocol(const WebProtocol& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WebProtocol::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebProtocol::~WebProtocol() {
  SharedDtor();
}

void WebProtocol::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WebProtocol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebProtocol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebProtocol_descriptor_;
}

const WebProtocol& WebProtocol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OS_2eNetwork_2eproto();  return *default_instance_;
}

WebProtocol* WebProtocol::default_instance_ = NULL;

WebProtocol* WebProtocol::New() const {
  return new WebProtocol;
}

void WebProtocol::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebProtocol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .cloudos.config.os.WebProtocol.Type type = 2 [default = HTTPS];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cloudos::config::os::WebProtocol_Type_IsValid(value)) {
            set_type(static_cast< ::cloudos::config::os::WebProtocol_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WebProtocol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .cloudos.config.os.WebProtocol.Type type = 2 [default = HTTPS];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WebProtocol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .cloudos.config.os.WebProtocol.Type type = 2 [default = HTTPS];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WebProtocol::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .cloudos.config.os.WebProtocol.Type type = 2 [default = HTTPS];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebProtocol::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebProtocol* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebProtocol*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebProtocol::MergeFrom(const WebProtocol& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebProtocol::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebProtocol::CopyFrom(const WebProtocol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebProtocol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void WebProtocol::Swap(WebProtocol* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebProtocol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebProtocol_descriptor_;
  metadata.reflection = WebProtocol_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SSLSettings::kCaFileFieldNumber;
const int SSLSettings::kCertFileFieldNumber;
const int SSLSettings::kKeyFileFieldNumber;
const int SSLSettings::kAllowUntrustedFieldNumber;
#endif  // !_MSC_VER

SSLSettings::SSLSettings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SSLSettings::InitAsDefaultInstance() {
}

SSLSettings::SSLSettings(const SSLSettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SSLSettings::SharedCtor() {
  _cached_size_ = 0;
  ca_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cert_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  allow_untrusted_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSLSettings::~SSLSettings() {
  SharedDtor();
}

void SSLSettings::SharedDtor() {
  if (ca_file_ != &::google::protobuf::internal::kEmptyString) {
    delete ca_file_;
  }
  if (cert_file_ != &::google::protobuf::internal::kEmptyString) {
    delete cert_file_;
  }
  if (key_file_ != &::google::protobuf::internal::kEmptyString) {
    delete key_file_;
  }
  if (this != default_instance_) {
  }
}

void SSLSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSLSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSLSettings_descriptor_;
}

const SSLSettings& SSLSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OS_2eNetwork_2eproto();  return *default_instance_;
}

SSLSettings* SSLSettings::default_instance_ = NULL;

SSLSettings* SSLSettings::New() const {
  return new SSLSettings;
}

void SSLSettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ca_file()) {
      if (ca_file_ != &::google::protobuf::internal::kEmptyString) {
        ca_file_->clear();
      }
    }
    if (has_cert_file()) {
      if (cert_file_ != &::google::protobuf::internal::kEmptyString) {
        cert_file_->clear();
      }
    }
    if (has_key_file()) {
      if (key_file_ != &::google::protobuf::internal::kEmptyString) {
        key_file_->clear();
      }
    }
    allow_untrusted_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SSLSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ca_file = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ca_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ca_file().data(), this->ca_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cert_file;
        break;
      }
      
      // optional string cert_file = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cert_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cert_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cert_file().data(), this->cert_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_key_file;
        break;
      }
      
      // optional string key_file = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key_file().data(), this->key_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_allow_untrusted;
        break;
      }
      
      // optional bool allow_untrusted = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allow_untrusted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_untrusted_)));
          set_has_allow_untrusted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SSLSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ca_file = 2;
  if (has_ca_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ca_file().data(), this->ca_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ca_file(), output);
  }
  
  // optional string cert_file = 4;
  if (has_cert_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cert_file().data(), this->cert_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->cert_file(), output);
  }
  
  // optional string key_file = 6;
  if (has_key_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key_file().data(), this->key_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->key_file(), output);
  }
  
  // optional bool allow_untrusted = 8 [default = false];
  if (has_allow_untrusted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->allow_untrusted(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SSLSettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ca_file = 2;
  if (has_ca_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ca_file().data(), this->ca_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ca_file(), target);
  }
  
  // optional string cert_file = 4;
  if (has_cert_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cert_file().data(), this->cert_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cert_file(), target);
  }
  
  // optional string key_file = 6;
  if (has_key_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key_file().data(), this->key_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->key_file(), target);
  }
  
  // optional bool allow_untrusted = 8 [default = false];
  if (has_allow_untrusted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->allow_untrusted(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SSLSettings::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ca_file = 2;
    if (has_ca_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ca_file());
    }
    
    // optional string cert_file = 4;
    if (has_cert_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cert_file());
    }
    
    // optional string key_file = 6;
    if (has_key_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key_file());
    }
    
    // optional bool allow_untrusted = 8 [default = false];
    if (has_allow_untrusted()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSLSettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SSLSettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SSLSettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SSLSettings::MergeFrom(const SSLSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ca_file()) {
      set_ca_file(from.ca_file());
    }
    if (from.has_cert_file()) {
      set_cert_file(from.cert_file());
    }
    if (from.has_key_file()) {
      set_key_file(from.key_file());
    }
    if (from.has_allow_untrusted()) {
      set_allow_untrusted(from.allow_untrusted());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SSLSettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSLSettings::CopyFrom(const SSLSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSLSettings::IsInitialized() const {
  
  return true;
}

void SSLSettings::Swap(SSLSettings* other) {
  if (other != this) {
    std::swap(ca_file_, other->ca_file_);
    std::swap(cert_file_, other->cert_file_);
    std::swap(key_file_, other->key_file_);
    std::swap(allow_untrusted_, other->allow_untrusted_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SSLSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSLSettings_descriptor_;
  metadata.reflection = SSLSettings_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace os
}  // namespace config
}  // namespace cloudos

// @@protoc_insertion_point(global_scope)
