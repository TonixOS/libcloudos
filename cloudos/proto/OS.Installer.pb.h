// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OS.Installer.proto

#ifndef PROTOBUF_OS_2eInstaller_2eproto__INCLUDED
#define PROTOBUF_OS_2eInstaller_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace cloudos {
namespace config {
namespace os {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_OS_2eInstaller_2eproto();
void protobuf_AssignDesc_OS_2eInstaller_2eproto();
void protobuf_ShutdownFile_OS_2eInstaller_2eproto();

class Installer;
class InstallerDiskPartition;
class InstallerDisk;

enum InstallerDiskPartition_Type {
  InstallerDiskPartition_Type_EXT4 = 0,
  InstallerDiskPartition_Type_LVM = 1
};
bool InstallerDiskPartition_Type_IsValid(int value);
const InstallerDiskPartition_Type InstallerDiskPartition_Type_Type_MIN = InstallerDiskPartition_Type_EXT4;
const InstallerDiskPartition_Type InstallerDiskPartition_Type_Type_MAX = InstallerDiskPartition_Type_LVM;
const int InstallerDiskPartition_Type_Type_ARRAYSIZE = InstallerDiskPartition_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* InstallerDiskPartition_Type_descriptor();
inline const ::std::string& InstallerDiskPartition_Type_Name(InstallerDiskPartition_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    InstallerDiskPartition_Type_descriptor(), value);
}
inline bool InstallerDiskPartition_Type_Parse(
    const ::std::string& name, InstallerDiskPartition_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InstallerDiskPartition_Type>(
    InstallerDiskPartition_Type_descriptor(), name, value);
}
// ===================================================================

class Installer : public ::google::protobuf::Message {
 public:
  Installer();
  virtual ~Installer();
  
  Installer(const Installer& from);
  
  inline Installer& operator=(const Installer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Installer& default_instance();
  
  void Swap(Installer* other);
  
  // implements Message ----------------------------------------------
  
  Installer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Installer& from);
  void MergeFrom(const Installer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool install_management = 20 [default = false];
  inline bool has_install_management() const;
  inline void clear_install_management();
  static const int kInstallManagementFieldNumber = 20;
  inline bool install_management() const;
  inline void set_install_management(bool value);
  
  // optional bool install_mariadb = 25 [default = false];
  inline bool has_install_mariadb() const;
  inline void clear_install_mariadb();
  static const int kInstallMariadbFieldNumber = 25;
  inline bool install_mariadb() const;
  inline void set_install_mariadb(bool value);
  
  // optional bool install_rabbitmq = 30 [default = false];
  inline bool has_install_rabbitmq() const;
  inline void clear_install_rabbitmq();
  static const int kInstallRabbitmqFieldNumber = 30;
  inline bool install_rabbitmq() const;
  inline void set_install_rabbitmq(bool value);
  
  // optional bool install_keystone = 40 [default = false];
  inline bool has_install_keystone() const;
  inline void clear_install_keystone();
  static const int kInstallKeystoneFieldNumber = 40;
  inline bool install_keystone() const;
  inline void set_install_keystone(bool value);
  
  // optional bool install_quantum = 45 [default = false];
  inline bool has_install_quantum() const;
  inline void clear_install_quantum();
  static const int kInstallQuantumFieldNumber = 45;
  inline bool install_quantum() const;
  inline void set_install_quantum(bool value);
  
  // optional bool install_glance = 50 [default = false];
  inline bool has_install_glance() const;
  inline void clear_install_glance();
  static const int kInstallGlanceFieldNumber = 50;
  inline bool install_glance() const;
  inline void set_install_glance(bool value);
  
  // optional bool install_cinder = 55 [default = false];
  inline bool has_install_cinder() const;
  inline void clear_install_cinder();
  static const int kInstallCinderFieldNumber = 55;
  inline bool install_cinder() const;
  inline void set_install_cinder(bool value);
  
  // optional bool install_nova = 60 [default = false];
  inline bool has_install_nova() const;
  inline void clear_install_nova();
  static const int kInstallNovaFieldNumber = 60;
  inline bool install_nova() const;
  inline void set_install_nova(bool value);
  
  // @@protoc_insertion_point(class_scope:cloudos.config.os.Installer)
 private:
  inline void set_has_install_management();
  inline void clear_has_install_management();
  inline void set_has_install_mariadb();
  inline void clear_has_install_mariadb();
  inline void set_has_install_rabbitmq();
  inline void clear_has_install_rabbitmq();
  inline void set_has_install_keystone();
  inline void clear_has_install_keystone();
  inline void set_has_install_quantum();
  inline void clear_has_install_quantum();
  inline void set_has_install_glance();
  inline void clear_has_install_glance();
  inline void set_has_install_cinder();
  inline void clear_has_install_cinder();
  inline void set_has_install_nova();
  inline void clear_has_install_nova();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool install_management_;
  bool install_mariadb_;
  bool install_rabbitmq_;
  bool install_keystone_;
  bool install_quantum_;
  bool install_glance_;
  bool install_cinder_;
  bool install_nova_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_OS_2eInstaller_2eproto();
  friend void protobuf_AssignDesc_OS_2eInstaller_2eproto();
  friend void protobuf_ShutdownFile_OS_2eInstaller_2eproto();
  
  void InitAsDefaultInstance();
  static Installer* default_instance_;
};
// -------------------------------------------------------------------

class InstallerDiskPartition : public ::google::protobuf::Message {
 public:
  InstallerDiskPartition();
  virtual ~InstallerDiskPartition();
  
  InstallerDiskPartition(const InstallerDiskPartition& from);
  
  inline InstallerDiskPartition& operator=(const InstallerDiskPartition& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const InstallerDiskPartition& default_instance();
  
  void Swap(InstallerDiskPartition* other);
  
  // implements Message ----------------------------------------------
  
  InstallerDiskPartition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstallerDiskPartition& from);
  void MergeFrom(const InstallerDiskPartition& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef InstallerDiskPartition_Type Type;
  static const Type EXT4 = InstallerDiskPartition_Type_EXT4;
  static const Type LVM = InstallerDiskPartition_Type_LVM;
  static inline bool Type_IsValid(int value) {
    return InstallerDiskPartition_Type_IsValid(value);
  }
  static const Type Type_MIN =
    InstallerDiskPartition_Type_Type_MIN;
  static const Type Type_MAX =
    InstallerDiskPartition_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    InstallerDiskPartition_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return InstallerDiskPartition_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return InstallerDiskPartition_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return InstallerDiskPartition_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  
  // optional .cloudos.config.os.InstallerDiskPartition.Type type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::cloudos::config::os::InstallerDiskPartition_Type type() const;
  inline void set_type(::cloudos::config::os::InstallerDiskPartition_Type value);
  
  // optional string mountpoint = 6;
  inline bool has_mountpoint() const;
  inline void clear_mountpoint();
  static const int kMountpointFieldNumber = 6;
  inline const ::std::string& mountpoint() const;
  inline void set_mountpoint(const ::std::string& value);
  inline void set_mountpoint(const char* value);
  inline void set_mountpoint(const char* value, size_t size);
  inline ::std::string* mutable_mountpoint();
  inline ::std::string* release_mountpoint();
  
  // optional string mountoptions = 8;
  inline bool has_mountoptions() const;
  inline void clear_mountoptions();
  static const int kMountoptionsFieldNumber = 8;
  inline const ::std::string& mountoptions() const;
  inline void set_mountoptions(const ::std::string& value);
  inline void set_mountoptions(const char* value);
  inline void set_mountoptions(const char* value, size_t size);
  inline ::std::string* mutable_mountoptions();
  inline ::std::string* release_mountoptions();
  
  // @@protoc_insertion_point(class_scope:cloudos.config.os.InstallerDiskPartition)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_mountpoint();
  inline void clear_has_mountpoint();
  inline void set_has_mountoptions();
  inline void clear_has_mountoptions();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* uuid_;
  ::std::string* mountpoint_;
  ::std::string* mountoptions_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_OS_2eInstaller_2eproto();
  friend void protobuf_AssignDesc_OS_2eInstaller_2eproto();
  friend void protobuf_ShutdownFile_OS_2eInstaller_2eproto();
  
  void InitAsDefaultInstance();
  static InstallerDiskPartition* default_instance_;
};
// -------------------------------------------------------------------

class InstallerDisk : public ::google::protobuf::Message {
 public:
  InstallerDisk();
  virtual ~InstallerDisk();
  
  InstallerDisk(const InstallerDisk& from);
  
  inline InstallerDisk& operator=(const InstallerDisk& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const InstallerDisk& default_instance();
  
  void Swap(InstallerDisk* other);
  
  // implements Message ----------------------------------------------
  
  InstallerDisk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstallerDisk& from);
  void MergeFrom(const InstallerDisk& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string device_path = 2;
  inline bool has_device_path() const;
  inline void clear_device_path();
  static const int kDevicePathFieldNumber = 2;
  inline const ::std::string& device_path() const;
  inline void set_device_path(const ::std::string& value);
  inline void set_device_path(const char* value);
  inline void set_device_path(const char* value, size_t size);
  inline ::std::string* mutable_device_path();
  inline ::std::string* release_device_path();
  
  // repeated .cloudos.config.os.InstallerDiskPartition partition = 4;
  inline int partition_size() const;
  inline void clear_partition();
  static const int kPartitionFieldNumber = 4;
  inline const ::cloudos::config::os::InstallerDiskPartition& partition(int index) const;
  inline ::cloudos::config::os::InstallerDiskPartition* mutable_partition(int index);
  inline ::cloudos::config::os::InstallerDiskPartition* add_partition();
  inline const ::google::protobuf::RepeatedPtrField< ::cloudos::config::os::InstallerDiskPartition >&
      partition() const;
  inline ::google::protobuf::RepeatedPtrField< ::cloudos::config::os::InstallerDiskPartition >*
      mutable_partition();
  
  // optional string model = 6;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 6;
  inline const ::std::string& model() const;
  inline void set_model(const ::std::string& value);
  inline void set_model(const char* value);
  inline void set_model(const char* value, size_t size);
  inline ::std::string* mutable_model();
  inline ::std::string* release_model();
  
  // optional uint64 size = 8;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 8;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:cloudos.config.os.InstallerDisk)
 private:
  inline void set_has_device_path();
  inline void clear_has_device_path();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_size();
  inline void clear_has_size();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* device_path_;
  ::google::protobuf::RepeatedPtrField< ::cloudos::config::os::InstallerDiskPartition > partition_;
  ::std::string* model_;
  ::google::protobuf::uint64 size_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_OS_2eInstaller_2eproto();
  friend void protobuf_AssignDesc_OS_2eInstaller_2eproto();
  friend void protobuf_ShutdownFile_OS_2eInstaller_2eproto();
  
  void InitAsDefaultInstance();
  static InstallerDisk* default_instance_;
};
// ===================================================================


// ===================================================================

// Installer

// optional bool install_management = 20 [default = false];
inline bool Installer::has_install_management() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Installer::set_has_install_management() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Installer::clear_has_install_management() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Installer::clear_install_management() {
  install_management_ = false;
  clear_has_install_management();
}
inline bool Installer::install_management() const {
  return install_management_;
}
inline void Installer::set_install_management(bool value) {
  set_has_install_management();
  install_management_ = value;
}

// optional bool install_mariadb = 25 [default = false];
inline bool Installer::has_install_mariadb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Installer::set_has_install_mariadb() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Installer::clear_has_install_mariadb() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Installer::clear_install_mariadb() {
  install_mariadb_ = false;
  clear_has_install_mariadb();
}
inline bool Installer::install_mariadb() const {
  return install_mariadb_;
}
inline void Installer::set_install_mariadb(bool value) {
  set_has_install_mariadb();
  install_mariadb_ = value;
}

// optional bool install_rabbitmq = 30 [default = false];
inline bool Installer::has_install_rabbitmq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Installer::set_has_install_rabbitmq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Installer::clear_has_install_rabbitmq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Installer::clear_install_rabbitmq() {
  install_rabbitmq_ = false;
  clear_has_install_rabbitmq();
}
inline bool Installer::install_rabbitmq() const {
  return install_rabbitmq_;
}
inline void Installer::set_install_rabbitmq(bool value) {
  set_has_install_rabbitmq();
  install_rabbitmq_ = value;
}

// optional bool install_keystone = 40 [default = false];
inline bool Installer::has_install_keystone() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Installer::set_has_install_keystone() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Installer::clear_has_install_keystone() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Installer::clear_install_keystone() {
  install_keystone_ = false;
  clear_has_install_keystone();
}
inline bool Installer::install_keystone() const {
  return install_keystone_;
}
inline void Installer::set_install_keystone(bool value) {
  set_has_install_keystone();
  install_keystone_ = value;
}

// optional bool install_quantum = 45 [default = false];
inline bool Installer::has_install_quantum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Installer::set_has_install_quantum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Installer::clear_has_install_quantum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Installer::clear_install_quantum() {
  install_quantum_ = false;
  clear_has_install_quantum();
}
inline bool Installer::install_quantum() const {
  return install_quantum_;
}
inline void Installer::set_install_quantum(bool value) {
  set_has_install_quantum();
  install_quantum_ = value;
}

// optional bool install_glance = 50 [default = false];
inline bool Installer::has_install_glance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Installer::set_has_install_glance() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Installer::clear_has_install_glance() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Installer::clear_install_glance() {
  install_glance_ = false;
  clear_has_install_glance();
}
inline bool Installer::install_glance() const {
  return install_glance_;
}
inline void Installer::set_install_glance(bool value) {
  set_has_install_glance();
  install_glance_ = value;
}

// optional bool install_cinder = 55 [default = false];
inline bool Installer::has_install_cinder() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Installer::set_has_install_cinder() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Installer::clear_has_install_cinder() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Installer::clear_install_cinder() {
  install_cinder_ = false;
  clear_has_install_cinder();
}
inline bool Installer::install_cinder() const {
  return install_cinder_;
}
inline void Installer::set_install_cinder(bool value) {
  set_has_install_cinder();
  install_cinder_ = value;
}

// optional bool install_nova = 60 [default = false];
inline bool Installer::has_install_nova() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Installer::set_has_install_nova() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Installer::clear_has_install_nova() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Installer::clear_install_nova() {
  install_nova_ = false;
  clear_has_install_nova();
}
inline bool Installer::install_nova() const {
  return install_nova_;
}
inline void Installer::set_install_nova(bool value) {
  set_has_install_nova();
  install_nova_ = value;
}

// -------------------------------------------------------------------

// InstallerDiskPartition

// optional string uuid = 2;
inline bool InstallerDiskPartition::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InstallerDiskPartition::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InstallerDiskPartition::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InstallerDiskPartition::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& InstallerDiskPartition::uuid() const {
  return *uuid_;
}
inline void InstallerDiskPartition::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void InstallerDiskPartition::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void InstallerDiskPartition::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InstallerDiskPartition::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* InstallerDiskPartition::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .cloudos.config.os.InstallerDiskPartition.Type type = 4;
inline bool InstallerDiskPartition::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InstallerDiskPartition::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InstallerDiskPartition::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InstallerDiskPartition::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::cloudos::config::os::InstallerDiskPartition_Type InstallerDiskPartition::type() const {
  return static_cast< ::cloudos::config::os::InstallerDiskPartition_Type >(type_);
}
inline void InstallerDiskPartition::set_type(::cloudos::config::os::InstallerDiskPartition_Type value) {
  GOOGLE_DCHECK(::cloudos::config::os::InstallerDiskPartition_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string mountpoint = 6;
inline bool InstallerDiskPartition::has_mountpoint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InstallerDiskPartition::set_has_mountpoint() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InstallerDiskPartition::clear_has_mountpoint() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InstallerDiskPartition::clear_mountpoint() {
  if (mountpoint_ != &::google::protobuf::internal::kEmptyString) {
    mountpoint_->clear();
  }
  clear_has_mountpoint();
}
inline const ::std::string& InstallerDiskPartition::mountpoint() const {
  return *mountpoint_;
}
inline void InstallerDiskPartition::set_mountpoint(const ::std::string& value) {
  set_has_mountpoint();
  if (mountpoint_ == &::google::protobuf::internal::kEmptyString) {
    mountpoint_ = new ::std::string;
  }
  mountpoint_->assign(value);
}
inline void InstallerDiskPartition::set_mountpoint(const char* value) {
  set_has_mountpoint();
  if (mountpoint_ == &::google::protobuf::internal::kEmptyString) {
    mountpoint_ = new ::std::string;
  }
  mountpoint_->assign(value);
}
inline void InstallerDiskPartition::set_mountpoint(const char* value, size_t size) {
  set_has_mountpoint();
  if (mountpoint_ == &::google::protobuf::internal::kEmptyString) {
    mountpoint_ = new ::std::string;
  }
  mountpoint_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InstallerDiskPartition::mutable_mountpoint() {
  set_has_mountpoint();
  if (mountpoint_ == &::google::protobuf::internal::kEmptyString) {
    mountpoint_ = new ::std::string;
  }
  return mountpoint_;
}
inline ::std::string* InstallerDiskPartition::release_mountpoint() {
  clear_has_mountpoint();
  if (mountpoint_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mountpoint_;
    mountpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string mountoptions = 8;
inline bool InstallerDiskPartition::has_mountoptions() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InstallerDiskPartition::set_has_mountoptions() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InstallerDiskPartition::clear_has_mountoptions() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InstallerDiskPartition::clear_mountoptions() {
  if (mountoptions_ != &::google::protobuf::internal::kEmptyString) {
    mountoptions_->clear();
  }
  clear_has_mountoptions();
}
inline const ::std::string& InstallerDiskPartition::mountoptions() const {
  return *mountoptions_;
}
inline void InstallerDiskPartition::set_mountoptions(const ::std::string& value) {
  set_has_mountoptions();
  if (mountoptions_ == &::google::protobuf::internal::kEmptyString) {
    mountoptions_ = new ::std::string;
  }
  mountoptions_->assign(value);
}
inline void InstallerDiskPartition::set_mountoptions(const char* value) {
  set_has_mountoptions();
  if (mountoptions_ == &::google::protobuf::internal::kEmptyString) {
    mountoptions_ = new ::std::string;
  }
  mountoptions_->assign(value);
}
inline void InstallerDiskPartition::set_mountoptions(const char* value, size_t size) {
  set_has_mountoptions();
  if (mountoptions_ == &::google::protobuf::internal::kEmptyString) {
    mountoptions_ = new ::std::string;
  }
  mountoptions_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InstallerDiskPartition::mutable_mountoptions() {
  set_has_mountoptions();
  if (mountoptions_ == &::google::protobuf::internal::kEmptyString) {
    mountoptions_ = new ::std::string;
  }
  return mountoptions_;
}
inline ::std::string* InstallerDiskPartition::release_mountoptions() {
  clear_has_mountoptions();
  if (mountoptions_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mountoptions_;
    mountoptions_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// InstallerDisk

// optional string device_path = 2;
inline bool InstallerDisk::has_device_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InstallerDisk::set_has_device_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InstallerDisk::clear_has_device_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InstallerDisk::clear_device_path() {
  if (device_path_ != &::google::protobuf::internal::kEmptyString) {
    device_path_->clear();
  }
  clear_has_device_path();
}
inline const ::std::string& InstallerDisk::device_path() const {
  return *device_path_;
}
inline void InstallerDisk::set_device_path(const ::std::string& value) {
  set_has_device_path();
  if (device_path_ == &::google::protobuf::internal::kEmptyString) {
    device_path_ = new ::std::string;
  }
  device_path_->assign(value);
}
inline void InstallerDisk::set_device_path(const char* value) {
  set_has_device_path();
  if (device_path_ == &::google::protobuf::internal::kEmptyString) {
    device_path_ = new ::std::string;
  }
  device_path_->assign(value);
}
inline void InstallerDisk::set_device_path(const char* value, size_t size) {
  set_has_device_path();
  if (device_path_ == &::google::protobuf::internal::kEmptyString) {
    device_path_ = new ::std::string;
  }
  device_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InstallerDisk::mutable_device_path() {
  set_has_device_path();
  if (device_path_ == &::google::protobuf::internal::kEmptyString) {
    device_path_ = new ::std::string;
  }
  return device_path_;
}
inline ::std::string* InstallerDisk::release_device_path() {
  clear_has_device_path();
  if (device_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_path_;
    device_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .cloudos.config.os.InstallerDiskPartition partition = 4;
inline int InstallerDisk::partition_size() const {
  return partition_.size();
}
inline void InstallerDisk::clear_partition() {
  partition_.Clear();
}
inline const ::cloudos::config::os::InstallerDiskPartition& InstallerDisk::partition(int index) const {
  return partition_.Get(index);
}
inline ::cloudos::config::os::InstallerDiskPartition* InstallerDisk::mutable_partition(int index) {
  return partition_.Mutable(index);
}
inline ::cloudos::config::os::InstallerDiskPartition* InstallerDisk::add_partition() {
  return partition_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cloudos::config::os::InstallerDiskPartition >&
InstallerDisk::partition() const {
  return partition_;
}
inline ::google::protobuf::RepeatedPtrField< ::cloudos::config::os::InstallerDiskPartition >*
InstallerDisk::mutable_partition() {
  return &partition_;
}

// optional string model = 6;
inline bool InstallerDisk::has_model() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InstallerDisk::set_has_model() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InstallerDisk::clear_has_model() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InstallerDisk::clear_model() {
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    model_->clear();
  }
  clear_has_model();
}
inline const ::std::string& InstallerDisk::model() const {
  return *model_;
}
inline void InstallerDisk::set_model(const ::std::string& value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  model_->assign(value);
}
inline void InstallerDisk::set_model(const char* value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  model_->assign(value);
}
inline void InstallerDisk::set_model(const char* value, size_t size) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  model_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InstallerDisk::mutable_model() {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  return model_;
}
inline ::std::string* InstallerDisk::release_model() {
  clear_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = model_;
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 size = 8;
inline bool InstallerDisk::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InstallerDisk::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InstallerDisk::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InstallerDisk::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::uint64 InstallerDisk::size() const {
  return size_;
}
inline void InstallerDisk::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace os
}  // namespace config
}  // namespace cloudos

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cloudos::config::os::InstallerDiskPartition_Type>() {
  return ::cloudos::config::os::InstallerDiskPartition_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_OS_2eInstaller_2eproto__INCLUDED
