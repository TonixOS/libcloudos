// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OS.HW.HDDisk.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "OS.HW.HDDisk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cloudos {
namespace config {
namespace os {
namespace hw {

namespace {

const ::google::protobuf::Descriptor* HDDiskPartition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HDDiskPartition_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* HDDiskPartition_PartType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* HDDisk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HDDisk_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_OS_2eHW_2eHDDisk_2eproto() {
  protobuf_AddDesc_OS_2eHW_2eHDDisk_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "OS.HW.HDDisk.proto");
  GOOGLE_CHECK(file != NULL);
  HDDiskPartition_descriptor_ = file->message_type(0);
  static const int HDDiskPartition_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDDiskPartition, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDDiskPartition, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDDiskPartition, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDDiskPartition, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDDiskPartition, filesystem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDDiskPartition, mountpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDDiskPartition, mountoptions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDDiskPartition, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDDiskPartition, size_unit_),
  };
  HDDiskPartition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HDDiskPartition_descriptor_,
      HDDiskPartition::default_instance_,
      HDDiskPartition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDDiskPartition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDDiskPartition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HDDiskPartition));
  HDDiskPartition_PartType_descriptor_ = HDDiskPartition_descriptor_->enum_type(0);
  HDDisk_descriptor_ = file->message_type(1);
  static const int HDDisk_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDDisk, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDDisk, partition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDDisk, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDDisk, size_),
  };
  HDDisk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HDDisk_descriptor_,
      HDDisk::default_instance_,
      HDDisk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDDisk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HDDisk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HDDisk));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_OS_2eHW_2eHDDisk_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HDDiskPartition_descriptor_, &HDDiskPartition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HDDisk_descriptor_, &HDDisk::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_OS_2eHW_2eHDDisk_2eproto() {
  delete HDDiskPartition::default_instance_;
  delete HDDiskPartition_reflection_;
  delete HDDiskPartition::_default_filesystem_;
  delete HDDiskPartition::_default_size_unit_;
  delete HDDisk::default_instance_;
  delete HDDisk_reflection_;
}

void protobuf_AddDesc_OS_2eHW_2eHDDisk_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022OS.HW.HDDisk.proto\022\024cloudos.config.os."
    "hw\"\210\002\n\017HDDiskPartition\022\r\n\005label\030\001 \001(\t\022\014\n"
    "\004uuid\030\002 \001(\t\022B\n\004type\030\004 \001(\0162..cloudos.conf"
    "ig.os.hw.HDDiskPartition.PartType:\004EXT2\022"
    "\r\n\005index\030\005 \001(\t\022\030\n\nfilesystem\030\006 \001(\t:\004ext4"
    "\022\022\n\nmountpoint\030\010 \001(\t\022\024\n\014mountoptions\030\n \001"
    "(\t\022\014\n\004size\030\014 \001(\004\022\024\n\tsize_unit\030\016 \001(\t:\001G\"\035"
    "\n\010PartType\022\010\n\004EXT2\020\000\022\007\n\003LVM\020\001\"n\n\006HDDisk\022"
    "\r\n\005index\030\002 \001(\t\0228\n\tpartition\030\004 \003(\0132%.clou"
    "dos.config.os.hw.HDDiskPartition\022\r\n\005mode"
    "l\030\006 \001(\t\022\014\n\004size\030\010 \001(\004", 421);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "OS.HW.HDDisk.proto", &protobuf_RegisterTypes);
  HDDiskPartition::_default_filesystem_ =
      new ::std::string("ext4", 4);
  HDDiskPartition::_default_size_unit_ =
      new ::std::string("G", 1);
  HDDiskPartition::default_instance_ = new HDDiskPartition();
  HDDisk::default_instance_ = new HDDisk();
  HDDiskPartition::default_instance_->InitAsDefaultInstance();
  HDDisk::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_OS_2eHW_2eHDDisk_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_OS_2eHW_2eHDDisk_2eproto {
  StaticDescriptorInitializer_OS_2eHW_2eHDDisk_2eproto() {
    protobuf_AddDesc_OS_2eHW_2eHDDisk_2eproto();
  }
} static_descriptor_initializer_OS_2eHW_2eHDDisk_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* HDDiskPartition_PartType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HDDiskPartition_PartType_descriptor_;
}
bool HDDiskPartition_PartType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const HDDiskPartition_PartType HDDiskPartition::EXT2;
const HDDiskPartition_PartType HDDiskPartition::LVM;
const HDDiskPartition_PartType HDDiskPartition::PartType_MIN;
const HDDiskPartition_PartType HDDiskPartition::PartType_MAX;
const int HDDiskPartition::PartType_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* HDDiskPartition::_default_filesystem_ = NULL;
::std::string* HDDiskPartition::_default_size_unit_ = NULL;
#ifndef _MSC_VER
const int HDDiskPartition::kLabelFieldNumber;
const int HDDiskPartition::kUuidFieldNumber;
const int HDDiskPartition::kTypeFieldNumber;
const int HDDiskPartition::kIndexFieldNumber;
const int HDDiskPartition::kFilesystemFieldNumber;
const int HDDiskPartition::kMountpointFieldNumber;
const int HDDiskPartition::kMountoptionsFieldNumber;
const int HDDiskPartition::kSizeFieldNumber;
const int HDDiskPartition::kSizeUnitFieldNumber;
#endif  // !_MSC_VER

HDDiskPartition::HDDiskPartition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HDDiskPartition::InitAsDefaultInstance() {
}

HDDiskPartition::HDDiskPartition(const HDDiskPartition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HDDiskPartition::SharedCtor() {
  _cached_size_ = 0;
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  index_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filesystem_ = const_cast< ::std::string*>(_default_filesystem_);
  mountpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mountoptions_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = GOOGLE_ULONGLONG(0);
  size_unit_ = const_cast< ::std::string*>(_default_size_unit_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HDDiskPartition::~HDDiskPartition() {
  SharedDtor();
}

void HDDiskPartition::SharedDtor() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (index_ != &::google::protobuf::internal::kEmptyString) {
    delete index_;
  }
  if (filesystem_ != _default_filesystem_) {
    delete filesystem_;
  }
  if (mountpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete mountpoint_;
  }
  if (mountoptions_ != &::google::protobuf::internal::kEmptyString) {
    delete mountoptions_;
  }
  if (size_unit_ != _default_size_unit_) {
    delete size_unit_;
  }
  if (this != default_instance_) {
  }
}

void HDDiskPartition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HDDiskPartition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HDDiskPartition_descriptor_;
}

const HDDiskPartition& HDDiskPartition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OS_2eHW_2eHDDisk_2eproto();
  return *default_instance_;
}

HDDiskPartition* HDDiskPartition::default_instance_ = NULL;

HDDiskPartition* HDDiskPartition::New() const {
  return new HDDiskPartition;
}

void HDDiskPartition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::kEmptyString) {
        label_->clear();
      }
    }
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    type_ = 0;
    if (has_index()) {
      if (index_ != &::google::protobuf::internal::kEmptyString) {
        index_->clear();
      }
    }
    if (has_filesystem()) {
      if (filesystem_ != _default_filesystem_) {
        filesystem_->assign(*_default_filesystem_);
      }
    }
    if (has_mountpoint()) {
      if (mountpoint_ != &::google::protobuf::internal::kEmptyString) {
        mountpoint_->clear();
      }
    }
    if (has_mountoptions()) {
      if (mountoptions_ != &::google::protobuf::internal::kEmptyString) {
        mountoptions_->clear();
      }
    }
    size_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_size_unit()) {
      if (size_unit_ != _default_size_unit_) {
        size_unit_->assign(*_default_size_unit_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HDDiskPartition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string label = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uuid;
        break;
      }

      // optional string uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .cloudos.config.os.hw.HDDiskPartition.PartType type = 4 [default = EXT2];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cloudos::config::os::hw::HDDiskPartition_PartType_IsValid(value)) {
            set_type(static_cast< ::cloudos::config::os::hw::HDDiskPartition_PartType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_index;
        break;
      }

      // optional string index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_index()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->index().data(), this->index().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_filesystem;
        break;
      }

      // optional string filesystem = 6 [default = "ext4"];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filesystem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filesystem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filesystem().data(), this->filesystem().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_mountpoint;
        break;
      }

      // optional string mountpoint = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mountpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mountpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mountpoint().data(), this->mountpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_mountoptions;
        break;
      }

      // optional string mountoptions = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mountoptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mountoptions()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mountoptions().data(), this->mountoptions().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_size;
        break;
      }

      // optional uint64 size = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_size_unit;
        break;
      }

      // optional string size_unit = 14 [default = "G"];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_size_unit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_size_unit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->size_unit().data(), this->size_unit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HDDiskPartition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string label = 1;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->label(), output);
  }

  // optional string uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uuid(), output);
  }

  // optional .cloudos.config.os.hw.HDDiskPartition.PartType type = 4 [default = EXT2];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional string index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->index().data(), this->index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->index(), output);
  }

  // optional string filesystem = 6 [default = "ext4"];
  if (has_filesystem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filesystem().data(), this->filesystem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->filesystem(), output);
  }

  // optional string mountpoint = 8;
  if (has_mountpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mountpoint().data(), this->mountpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->mountpoint(), output);
  }

  // optional string mountoptions = 10;
  if (has_mountoptions()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mountoptions().data(), this->mountoptions().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->mountoptions(), output);
  }

  // optional uint64 size = 12;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->size(), output);
  }

  // optional string size_unit = 14 [default = "G"];
  if (has_size_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->size_unit().data(), this->size_unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->size_unit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HDDiskPartition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string label = 1;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->label(), target);
  }

  // optional string uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uuid(), target);
  }

  // optional .cloudos.config.os.hw.HDDiskPartition.PartType type = 4 [default = EXT2];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional string index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->index().data(), this->index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->index(), target);
  }

  // optional string filesystem = 6 [default = "ext4"];
  if (has_filesystem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filesystem().data(), this->filesystem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->filesystem(), target);
  }

  // optional string mountpoint = 8;
  if (has_mountpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mountpoint().data(), this->mountpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->mountpoint(), target);
  }

  // optional string mountoptions = 10;
  if (has_mountoptions()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mountoptions().data(), this->mountoptions().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->mountoptions(), target);
  }

  // optional uint64 size = 12;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->size(), target);
  }

  // optional string size_unit = 14 [default = "G"];
  if (has_size_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->size_unit().data(), this->size_unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->size_unit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HDDiskPartition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string label = 1;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional string uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional .cloudos.config.os.hw.HDDiskPartition.PartType type = 4 [default = EXT2];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->index());
    }

    // optional string filesystem = 6 [default = "ext4"];
    if (has_filesystem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filesystem());
    }

    // optional string mountpoint = 8;
    if (has_mountpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mountpoint());
    }

    // optional string mountoptions = 10;
    if (has_mountoptions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mountoptions());
    }

    // optional uint64 size = 12;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string size_unit = 14 [default = "G"];
    if (has_size_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->size_unit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HDDiskPartition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HDDiskPartition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HDDiskPartition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HDDiskPartition::MergeFrom(const HDDiskPartition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_filesystem()) {
      set_filesystem(from.filesystem());
    }
    if (from.has_mountpoint()) {
      set_mountpoint(from.mountpoint());
    }
    if (from.has_mountoptions()) {
      set_mountoptions(from.mountoptions());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_size_unit()) {
      set_size_unit(from.size_unit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HDDiskPartition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HDDiskPartition::CopyFrom(const HDDiskPartition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HDDiskPartition::IsInitialized() const {

  return true;
}

void HDDiskPartition::Swap(HDDiskPartition* other) {
  if (other != this) {
    std::swap(label_, other->label_);
    std::swap(uuid_, other->uuid_);
    std::swap(type_, other->type_);
    std::swap(index_, other->index_);
    std::swap(filesystem_, other->filesystem_);
    std::swap(mountpoint_, other->mountpoint_);
    std::swap(mountoptions_, other->mountoptions_);
    std::swap(size_, other->size_);
    std::swap(size_unit_, other->size_unit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HDDiskPartition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HDDiskPartition_descriptor_;
  metadata.reflection = HDDiskPartition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HDDisk::kIndexFieldNumber;
const int HDDisk::kPartitionFieldNumber;
const int HDDisk::kModelFieldNumber;
const int HDDisk::kSizeFieldNumber;
#endif  // !_MSC_VER

HDDisk::HDDisk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HDDisk::InitAsDefaultInstance() {
}

HDDisk::HDDisk(const HDDisk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HDDisk::SharedCtor() {
  _cached_size_ = 0;
  index_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HDDisk::~HDDisk() {
  SharedDtor();
}

void HDDisk::SharedDtor() {
  if (index_ != &::google::protobuf::internal::kEmptyString) {
    delete index_;
  }
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    delete model_;
  }
  if (this != default_instance_) {
  }
}

void HDDisk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HDDisk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HDDisk_descriptor_;
}

const HDDisk& HDDisk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OS_2eHW_2eHDDisk_2eproto();
  return *default_instance_;
}

HDDisk* HDDisk::default_instance_ = NULL;

HDDisk* HDDisk::New() const {
  return new HDDisk;
}

void HDDisk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_index()) {
      if (index_ != &::google::protobuf::internal::kEmptyString) {
        index_->clear();
      }
    }
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::kEmptyString) {
        model_->clear();
      }
    }
    size_ = GOOGLE_ULONGLONG(0);
  }
  partition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HDDisk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_index()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->index().data(), this->index().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_partition;
        break;
      }

      // repeated .cloudos.config.os.hw.HDDiskPartition partition = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_partition;
        if (input->ExpectTag(50)) goto parse_model;
        break;
      }

      // optional string model = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_size;
        break;
      }

      // optional uint64 size = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HDDisk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->index().data(), this->index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->index(), output);
  }

  // repeated .cloudos.config.os.hw.HDDiskPartition partition = 4;
  for (int i = 0; i < this->partition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->partition(i), output);
  }

  // optional string model = 6;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->model(), output);
  }

  // optional uint64 size = 8;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HDDisk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->index().data(), this->index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->index(), target);
  }

  // repeated .cloudos.config.os.hw.HDDiskPartition partition = 4;
  for (int i = 0; i < this->partition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->partition(i), target);
  }

  // optional string model = 6;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->model(), target);
  }

  // optional uint64 size = 8;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HDDisk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->index());
    }

    // optional string model = 6;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional uint64 size = 8;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

  }
  // repeated .cloudos.config.os.hw.HDDiskPartition partition = 4;
  total_size += 1 * this->partition_size();
  for (int i = 0; i < this->partition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partition(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HDDisk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HDDisk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HDDisk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HDDisk::MergeFrom(const HDDisk& from) {
  GOOGLE_CHECK_NE(&from, this);
  partition_.MergeFrom(from.partition_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HDDisk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HDDisk::CopyFrom(const HDDisk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HDDisk::IsInitialized() const {

  return true;
}

void HDDisk::Swap(HDDisk* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    partition_.Swap(&other->partition_);
    std::swap(model_, other->model_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HDDisk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HDDisk_descriptor_;
  metadata.reflection = HDDisk_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hw
}  // namespace os
}  // namespace config
}  // namespace cloudos

// @@protoc_insertion_point(global_scope)
