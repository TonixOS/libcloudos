// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VM.ManagementServer.proto

#ifndef PROTOBUF_VM_2eManagementServer_2eproto__INCLUDED
#define PROTOBUF_VM_2eManagementServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "OS.Network.pb.h"
// @@protoc_insertion_point(includes)

namespace cloudos {
namespace config {
namespace vm {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_VM_2eManagementServer_2eproto();
void protobuf_AssignDesc_VM_2eManagementServer_2eproto();
void protobuf_ShutdownFile_VM_2eManagementServer_2eproto();

class ManagementServer;

// ===================================================================

class ManagementServer : public ::google::protobuf::Message {
 public:
  ManagementServer();
  virtual ~ManagementServer();
  
  ManagementServer(const ManagementServer& from);
  
  inline ManagementServer& operator=(const ManagementServer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ManagementServer& default_instance();
  
  void Swap(ManagementServer* other);
  
  // implements Message ----------------------------------------------
  
  ManagementServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ManagementServer& from);
  void MergeFrom(const ManagementServer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string ip = 6;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 6;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  
  // optional string secret_key = 10;
  inline bool has_secret_key() const;
  inline void clear_secret_key();
  static const int kSecretKeyFieldNumber = 10;
  inline const ::std::string& secret_key() const;
  inline void set_secret_key(const ::std::string& value);
  inline void set_secret_key(const char* value);
  inline void set_secret_key(const char* value, size_t size);
  inline ::std::string* mutable_secret_key();
  inline ::std::string* release_secret_key();
  
  // optional .cloudos.config.os.SSLSettings ssl_settings = 12;
  inline bool has_ssl_settings() const;
  inline void clear_ssl_settings();
  static const int kSslSettingsFieldNumber = 12;
  inline const ::cloudos::config::os::SSLSettings& ssl_settings() const;
  inline ::cloudos::config::os::SSLSettings* mutable_ssl_settings();
  inline ::cloudos::config::os::SSLSettings* release_ssl_settings();
  
  // @@protoc_insertion_point(class_scope:cloudos.config.vm.ManagementServer)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_secret_key();
  inline void clear_has_secret_key();
  inline void set_has_ssl_settings();
  inline void clear_has_ssl_settings();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* ip_;
  ::std::string* secret_key_;
  ::cloudos::config::os::SSLSettings* ssl_settings_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_VM_2eManagementServer_2eproto();
  friend void protobuf_AssignDesc_VM_2eManagementServer_2eproto();
  friend void protobuf_ShutdownFile_VM_2eManagementServer_2eproto();
  
  void InitAsDefaultInstance();
  static ManagementServer* default_instance_;
};
// ===================================================================


// ===================================================================

// ManagementServer

// optional string ip = 6;
inline bool ManagementServer::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ManagementServer::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ManagementServer::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ManagementServer::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& ManagementServer::ip() const {
  return *ip_;
}
inline void ManagementServer::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ManagementServer::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ManagementServer::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ManagementServer::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* ManagementServer::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string secret_key = 10;
inline bool ManagementServer::has_secret_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ManagementServer::set_has_secret_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ManagementServer::clear_has_secret_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ManagementServer::clear_secret_key() {
  if (secret_key_ != &::google::protobuf::internal::kEmptyString) {
    secret_key_->clear();
  }
  clear_has_secret_key();
}
inline const ::std::string& ManagementServer::secret_key() const {
  return *secret_key_;
}
inline void ManagementServer::set_secret_key(const ::std::string& value) {
  set_has_secret_key();
  if (secret_key_ == &::google::protobuf::internal::kEmptyString) {
    secret_key_ = new ::std::string;
  }
  secret_key_->assign(value);
}
inline void ManagementServer::set_secret_key(const char* value) {
  set_has_secret_key();
  if (secret_key_ == &::google::protobuf::internal::kEmptyString) {
    secret_key_ = new ::std::string;
  }
  secret_key_->assign(value);
}
inline void ManagementServer::set_secret_key(const char* value, size_t size) {
  set_has_secret_key();
  if (secret_key_ == &::google::protobuf::internal::kEmptyString) {
    secret_key_ = new ::std::string;
  }
  secret_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ManagementServer::mutable_secret_key() {
  set_has_secret_key();
  if (secret_key_ == &::google::protobuf::internal::kEmptyString) {
    secret_key_ = new ::std::string;
  }
  return secret_key_;
}
inline ::std::string* ManagementServer::release_secret_key() {
  clear_has_secret_key();
  if (secret_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = secret_key_;
    secret_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .cloudos.config.os.SSLSettings ssl_settings = 12;
inline bool ManagementServer::has_ssl_settings() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ManagementServer::set_has_ssl_settings() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ManagementServer::clear_has_ssl_settings() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ManagementServer::clear_ssl_settings() {
  if (ssl_settings_ != NULL) ssl_settings_->::cloudos::config::os::SSLSettings::Clear();
  clear_has_ssl_settings();
}
inline const ::cloudos::config::os::SSLSettings& ManagementServer::ssl_settings() const {
  return ssl_settings_ != NULL ? *ssl_settings_ : *default_instance_->ssl_settings_;
}
inline ::cloudos::config::os::SSLSettings* ManagementServer::mutable_ssl_settings() {
  set_has_ssl_settings();
  if (ssl_settings_ == NULL) ssl_settings_ = new ::cloudos::config::os::SSLSettings;
  return ssl_settings_;
}
inline ::cloudos::config::os::SSLSettings* ManagementServer::release_ssl_settings() {
  clear_has_ssl_settings();
  ::cloudos::config::os::SSLSettings* temp = ssl_settings_;
  ssl_settings_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vm
}  // namespace config
}  // namespace cloudos

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_VM_2eManagementServer_2eproto__INCLUDED
