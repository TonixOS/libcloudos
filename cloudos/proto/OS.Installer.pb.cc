// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "OS.Installer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cloudos {
namespace config {
namespace os {

namespace {

const ::google::protobuf::Descriptor* Installer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Installer_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstallerDiskPartition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstallerDiskPartition_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* InstallerDiskPartition_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InstallerDisk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstallerDisk_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_OS_2eInstaller_2eproto() {
  protobuf_AddDesc_OS_2eInstaller_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "OS.Installer.proto");
  GOOGLE_CHECK(file != NULL);
  Installer_descriptor_ = file->message_type(0);
  static const int Installer_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Installer, install_management_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Installer, install_mariadb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Installer, install_rabbitmq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Installer, install_keystone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Installer, install_quantum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Installer, install_glance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Installer, install_cinder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Installer, install_nova_),
  };
  Installer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Installer_descriptor_,
      Installer::default_instance_,
      Installer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Installer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Installer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Installer));
  InstallerDiskPartition_descriptor_ = file->message_type(1);
  static const int InstallerDiskPartition_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallerDiskPartition, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallerDiskPartition, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallerDiskPartition, mountpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallerDiskPartition, mountoptions_),
  };
  InstallerDiskPartition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstallerDiskPartition_descriptor_,
      InstallerDiskPartition::default_instance_,
      InstallerDiskPartition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallerDiskPartition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallerDiskPartition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstallerDiskPartition));
  InstallerDiskPartition_Type_descriptor_ = InstallerDiskPartition_descriptor_->enum_type(0);
  InstallerDisk_descriptor_ = file->message_type(2);
  static const int InstallerDisk_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallerDisk, device_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallerDisk, partition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallerDisk, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallerDisk, size_),
  };
  InstallerDisk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstallerDisk_descriptor_,
      InstallerDisk::default_instance_,
      InstallerDisk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallerDisk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstallerDisk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstallerDisk));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_OS_2eInstaller_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Installer_descriptor_, &Installer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstallerDiskPartition_descriptor_, &InstallerDiskPartition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstallerDisk_descriptor_, &InstallerDisk::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_OS_2eInstaller_2eproto() {
  delete Installer::default_instance_;
  delete Installer_reflection_;
  delete InstallerDiskPartition::default_instance_;
  delete InstallerDiskPartition_reflection_;
  delete InstallerDisk::default_instance_;
  delete InstallerDisk_reflection_;
}

void protobuf_AddDesc_OS_2eInstaller_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022OS.Installer.proto\022\021cloudos.config.os\""
    "\213\002\n\tInstaller\022!\n\022install_management\030\024 \001("
    "\010:\005false\022\036\n\017install_mariadb\030\031 \001(\010:\005false"
    "\022\037\n\020install_rabbitmq\030\036 \001(\010:\005false\022\037\n\020ins"
    "tall_keystone\030( \001(\010:\005false\022\036\n\017install_qu"
    "antum\030- \001(\010:\005false\022\035\n\016install_glance\0302 \001"
    "(\010:\005false\022\035\n\016install_cinder\0307 \001(\010:\005false"
    "\022\033\n\014install_nova\030< \001(\010:\005false\"\251\001\n\026Instal"
    "lerDiskPartition\022\014\n\004uuid\030\002 \001(\t\022<\n\004type\030\004"
    " \001(\0162..cloudos.config.os.InstallerDiskPa"
    "rtition.Type\022\022\n\nmountpoint\030\006 \001(\t\022\024\n\014moun"
    "toptions\030\010 \001(\t\"\031\n\004Type\022\010\n\004EXT4\020\000\022\007\n\003LVM\020"
    "\001\"\177\n\rInstallerDisk\022\023\n\013device_path\030\002 \001(\t\022"
    "<\n\tpartition\030\004 \003(\0132).cloudos.config.os.I"
    "nstallerDiskPartition\022\r\n\005model\030\006 \001(\t\022\014\n\004"
    "size\030\010 \001(\004", 610);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "OS.Installer.proto", &protobuf_RegisterTypes);
  Installer::default_instance_ = new Installer();
  InstallerDiskPartition::default_instance_ = new InstallerDiskPartition();
  InstallerDisk::default_instance_ = new InstallerDisk();
  Installer::default_instance_->InitAsDefaultInstance();
  InstallerDiskPartition::default_instance_->InitAsDefaultInstance();
  InstallerDisk::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_OS_2eInstaller_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_OS_2eInstaller_2eproto {
  StaticDescriptorInitializer_OS_2eInstaller_2eproto() {
    protobuf_AddDesc_OS_2eInstaller_2eproto();
  }
} static_descriptor_initializer_OS_2eInstaller_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Installer::kInstallManagementFieldNumber;
const int Installer::kInstallMariadbFieldNumber;
const int Installer::kInstallRabbitmqFieldNumber;
const int Installer::kInstallKeystoneFieldNumber;
const int Installer::kInstallQuantumFieldNumber;
const int Installer::kInstallGlanceFieldNumber;
const int Installer::kInstallCinderFieldNumber;
const int Installer::kInstallNovaFieldNumber;
#endif  // !_MSC_VER

Installer::Installer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Installer::InitAsDefaultInstance() {
}

Installer::Installer(const Installer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Installer::SharedCtor() {
  _cached_size_ = 0;
  install_management_ = false;
  install_mariadb_ = false;
  install_rabbitmq_ = false;
  install_keystone_ = false;
  install_quantum_ = false;
  install_glance_ = false;
  install_cinder_ = false;
  install_nova_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Installer::~Installer() {
  SharedDtor();
}

void Installer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Installer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Installer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Installer_descriptor_;
}

const Installer& Installer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OS_2eInstaller_2eproto();  return *default_instance_;
}

Installer* Installer::default_instance_ = NULL;

Installer* Installer::New() const {
  return new Installer;
}

void Installer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    install_management_ = false;
    install_mariadb_ = false;
    install_rabbitmq_ = false;
    install_keystone_ = false;
    install_quantum_ = false;
    install_glance_ = false;
    install_cinder_ = false;
    install_nova_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Installer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool install_management = 20 [default = false];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &install_management_)));
          set_has_install_management();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_install_mariadb;
        break;
      }
      
      // optional bool install_mariadb = 25 [default = false];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_install_mariadb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &install_mariadb_)));
          set_has_install_mariadb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_install_rabbitmq;
        break;
      }
      
      // optional bool install_rabbitmq = 30 [default = false];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_install_rabbitmq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &install_rabbitmq_)));
          set_has_install_rabbitmq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_install_keystone;
        break;
      }
      
      // optional bool install_keystone = 40 [default = false];
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_install_keystone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &install_keystone_)));
          set_has_install_keystone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_install_quantum;
        break;
      }
      
      // optional bool install_quantum = 45 [default = false];
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_install_quantum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &install_quantum_)));
          set_has_install_quantum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_install_glance;
        break;
      }
      
      // optional bool install_glance = 50 [default = false];
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_install_glance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &install_glance_)));
          set_has_install_glance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_install_cinder;
        break;
      }
      
      // optional bool install_cinder = 55 [default = false];
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_install_cinder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &install_cinder_)));
          set_has_install_cinder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_install_nova;
        break;
      }
      
      // optional bool install_nova = 60 [default = false];
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_install_nova:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &install_nova_)));
          set_has_install_nova();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Installer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool install_management = 20 [default = false];
  if (has_install_management()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->install_management(), output);
  }
  
  // optional bool install_mariadb = 25 [default = false];
  if (has_install_mariadb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->install_mariadb(), output);
  }
  
  // optional bool install_rabbitmq = 30 [default = false];
  if (has_install_rabbitmq()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->install_rabbitmq(), output);
  }
  
  // optional bool install_keystone = 40 [default = false];
  if (has_install_keystone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->install_keystone(), output);
  }
  
  // optional bool install_quantum = 45 [default = false];
  if (has_install_quantum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(45, this->install_quantum(), output);
  }
  
  // optional bool install_glance = 50 [default = false];
  if (has_install_glance()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(50, this->install_glance(), output);
  }
  
  // optional bool install_cinder = 55 [default = false];
  if (has_install_cinder()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(55, this->install_cinder(), output);
  }
  
  // optional bool install_nova = 60 [default = false];
  if (has_install_nova()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(60, this->install_nova(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Installer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool install_management = 20 [default = false];
  if (has_install_management()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->install_management(), target);
  }
  
  // optional bool install_mariadb = 25 [default = false];
  if (has_install_mariadb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->install_mariadb(), target);
  }
  
  // optional bool install_rabbitmq = 30 [default = false];
  if (has_install_rabbitmq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->install_rabbitmq(), target);
  }
  
  // optional bool install_keystone = 40 [default = false];
  if (has_install_keystone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->install_keystone(), target);
  }
  
  // optional bool install_quantum = 45 [default = false];
  if (has_install_quantum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(45, this->install_quantum(), target);
  }
  
  // optional bool install_glance = 50 [default = false];
  if (has_install_glance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(50, this->install_glance(), target);
  }
  
  // optional bool install_cinder = 55 [default = false];
  if (has_install_cinder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(55, this->install_cinder(), target);
  }
  
  // optional bool install_nova = 60 [default = false];
  if (has_install_nova()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(60, this->install_nova(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Installer::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool install_management = 20 [default = false];
    if (has_install_management()) {
      total_size += 2 + 1;
    }
    
    // optional bool install_mariadb = 25 [default = false];
    if (has_install_mariadb()) {
      total_size += 2 + 1;
    }
    
    // optional bool install_rabbitmq = 30 [default = false];
    if (has_install_rabbitmq()) {
      total_size += 2 + 1;
    }
    
    // optional bool install_keystone = 40 [default = false];
    if (has_install_keystone()) {
      total_size += 2 + 1;
    }
    
    // optional bool install_quantum = 45 [default = false];
    if (has_install_quantum()) {
      total_size += 2 + 1;
    }
    
    // optional bool install_glance = 50 [default = false];
    if (has_install_glance()) {
      total_size += 2 + 1;
    }
    
    // optional bool install_cinder = 55 [default = false];
    if (has_install_cinder()) {
      total_size += 2 + 1;
    }
    
    // optional bool install_nova = 60 [default = false];
    if (has_install_nova()) {
      total_size += 2 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Installer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Installer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Installer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Installer::MergeFrom(const Installer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_install_management()) {
      set_install_management(from.install_management());
    }
    if (from.has_install_mariadb()) {
      set_install_mariadb(from.install_mariadb());
    }
    if (from.has_install_rabbitmq()) {
      set_install_rabbitmq(from.install_rabbitmq());
    }
    if (from.has_install_keystone()) {
      set_install_keystone(from.install_keystone());
    }
    if (from.has_install_quantum()) {
      set_install_quantum(from.install_quantum());
    }
    if (from.has_install_glance()) {
      set_install_glance(from.install_glance());
    }
    if (from.has_install_cinder()) {
      set_install_cinder(from.install_cinder());
    }
    if (from.has_install_nova()) {
      set_install_nova(from.install_nova());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Installer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Installer::CopyFrom(const Installer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Installer::IsInitialized() const {
  
  return true;
}

void Installer::Swap(Installer* other) {
  if (other != this) {
    std::swap(install_management_, other->install_management_);
    std::swap(install_mariadb_, other->install_mariadb_);
    std::swap(install_rabbitmq_, other->install_rabbitmq_);
    std::swap(install_keystone_, other->install_keystone_);
    std::swap(install_quantum_, other->install_quantum_);
    std::swap(install_glance_, other->install_glance_);
    std::swap(install_cinder_, other->install_cinder_);
    std::swap(install_nova_, other->install_nova_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Installer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Installer_descriptor_;
  metadata.reflection = Installer_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* InstallerDiskPartition_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstallerDiskPartition_Type_descriptor_;
}
bool InstallerDiskPartition_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const InstallerDiskPartition_Type InstallerDiskPartition::EXT4;
const InstallerDiskPartition_Type InstallerDiskPartition::LVM;
const InstallerDiskPartition_Type InstallerDiskPartition::Type_MIN;
const InstallerDiskPartition_Type InstallerDiskPartition::Type_MAX;
const int InstallerDiskPartition::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int InstallerDiskPartition::kUuidFieldNumber;
const int InstallerDiskPartition::kTypeFieldNumber;
const int InstallerDiskPartition::kMountpointFieldNumber;
const int InstallerDiskPartition::kMountoptionsFieldNumber;
#endif  // !_MSC_VER

InstallerDiskPartition::InstallerDiskPartition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstallerDiskPartition::InitAsDefaultInstance() {
}

InstallerDiskPartition::InstallerDiskPartition(const InstallerDiskPartition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstallerDiskPartition::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  mountpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mountoptions_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstallerDiskPartition::~InstallerDiskPartition() {
  SharedDtor();
}

void InstallerDiskPartition::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (mountpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete mountpoint_;
  }
  if (mountoptions_ != &::google::protobuf::internal::kEmptyString) {
    delete mountoptions_;
  }
  if (this != default_instance_) {
  }
}

void InstallerDiskPartition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstallerDiskPartition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstallerDiskPartition_descriptor_;
}

const InstallerDiskPartition& InstallerDiskPartition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OS_2eInstaller_2eproto();  return *default_instance_;
}

InstallerDiskPartition* InstallerDiskPartition::default_instance_ = NULL;

InstallerDiskPartition* InstallerDiskPartition::New() const {
  return new InstallerDiskPartition;
}

void InstallerDiskPartition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    type_ = 0;
    if (has_mountpoint()) {
      if (mountpoint_ != &::google::protobuf::internal::kEmptyString) {
        mountpoint_->clear();
      }
    }
    if (has_mountoptions()) {
      if (mountoptions_ != &::google::protobuf::internal::kEmptyString) {
        mountoptions_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstallerDiskPartition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // optional .cloudos.config.os.InstallerDiskPartition.Type type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::cloudos::config::os::InstallerDiskPartition_Type_IsValid(value)) {
            set_type(static_cast< ::cloudos::config::os::InstallerDiskPartition_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mountpoint;
        break;
      }
      
      // optional string mountpoint = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mountpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mountpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mountpoint().data(), this->mountpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_mountoptions;
        break;
      }
      
      // optional string mountoptions = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mountoptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mountoptions()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mountoptions().data(), this->mountoptions().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstallerDiskPartition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uuid(), output);
  }
  
  // optional .cloudos.config.os.InstallerDiskPartition.Type type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }
  
  // optional string mountpoint = 6;
  if (has_mountpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mountpoint().data(), this->mountpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->mountpoint(), output);
  }
  
  // optional string mountoptions = 8;
  if (has_mountoptions()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mountoptions().data(), this->mountoptions().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->mountoptions(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstallerDiskPartition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uuid = 2;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uuid(), target);
  }
  
  // optional .cloudos.config.os.InstallerDiskPartition.Type type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }
  
  // optional string mountpoint = 6;
  if (has_mountpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mountpoint().data(), this->mountpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mountpoint(), target);
  }
  
  // optional string mountoptions = 8;
  if (has_mountoptions()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mountoptions().data(), this->mountoptions().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->mountoptions(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstallerDiskPartition::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uuid = 2;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }
    
    // optional .cloudos.config.os.InstallerDiskPartition.Type type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string mountpoint = 6;
    if (has_mountpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mountpoint());
    }
    
    // optional string mountoptions = 8;
    if (has_mountoptions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mountoptions());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstallerDiskPartition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstallerDiskPartition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstallerDiskPartition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstallerDiskPartition::MergeFrom(const InstallerDiskPartition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_mountpoint()) {
      set_mountpoint(from.mountpoint());
    }
    if (from.has_mountoptions()) {
      set_mountoptions(from.mountoptions());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstallerDiskPartition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstallerDiskPartition::CopyFrom(const InstallerDiskPartition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallerDiskPartition::IsInitialized() const {
  
  return true;
}

void InstallerDiskPartition::Swap(InstallerDiskPartition* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(type_, other->type_);
    std::swap(mountpoint_, other->mountpoint_);
    std::swap(mountoptions_, other->mountoptions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstallerDiskPartition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstallerDiskPartition_descriptor_;
  metadata.reflection = InstallerDiskPartition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstallerDisk::kDevicePathFieldNumber;
const int InstallerDisk::kPartitionFieldNumber;
const int InstallerDisk::kModelFieldNumber;
const int InstallerDisk::kSizeFieldNumber;
#endif  // !_MSC_VER

InstallerDisk::InstallerDisk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstallerDisk::InitAsDefaultInstance() {
}

InstallerDisk::InstallerDisk(const InstallerDisk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstallerDisk::SharedCtor() {
  _cached_size_ = 0;
  device_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstallerDisk::~InstallerDisk() {
  SharedDtor();
}

void InstallerDisk::SharedDtor() {
  if (device_path_ != &::google::protobuf::internal::kEmptyString) {
    delete device_path_;
  }
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    delete model_;
  }
  if (this != default_instance_) {
  }
}

void InstallerDisk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstallerDisk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstallerDisk_descriptor_;
}

const InstallerDisk& InstallerDisk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OS_2eInstaller_2eproto();  return *default_instance_;
}

InstallerDisk* InstallerDisk::default_instance_ = NULL;

InstallerDisk* InstallerDisk::New() const {
  return new InstallerDisk;
}

void InstallerDisk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_device_path()) {
      if (device_path_ != &::google::protobuf::internal::kEmptyString) {
        device_path_->clear();
      }
    }
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::kEmptyString) {
        model_->clear();
      }
    }
    size_ = GOOGLE_ULONGLONG(0);
  }
  partition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstallerDisk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_path().data(), this->device_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_partition;
        break;
      }
      
      // repeated .cloudos.config.os.InstallerDiskPartition partition = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_partition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_partition;
        if (input->ExpectTag(50)) goto parse_model;
        break;
      }
      
      // optional string model = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_size;
        break;
      }
      
      // optional uint64 size = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstallerDisk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string device_path = 2;
  if (has_device_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_path().data(), this->device_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->device_path(), output);
  }
  
  // repeated .cloudos.config.os.InstallerDiskPartition partition = 4;
  for (int i = 0; i < this->partition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->partition(i), output);
  }
  
  // optional string model = 6;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->model(), output);
  }
  
  // optional uint64 size = 8;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstallerDisk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string device_path = 2;
  if (has_device_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_path().data(), this->device_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device_path(), target);
  }
  
  // repeated .cloudos.config.os.InstallerDiskPartition partition = 4;
  for (int i = 0; i < this->partition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->partition(i), target);
  }
  
  // optional string model = 6;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->model(), target);
  }
  
  // optional uint64 size = 8;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstallerDisk::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_path = 2;
    if (has_device_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_path());
    }
    
    // optional string model = 6;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }
    
    // optional uint64 size = 8;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }
    
  }
  // repeated .cloudos.config.os.InstallerDiskPartition partition = 4;
  total_size += 1 * this->partition_size();
  for (int i = 0; i < this->partition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->partition(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstallerDisk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstallerDisk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstallerDisk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstallerDisk::MergeFrom(const InstallerDisk& from) {
  GOOGLE_CHECK_NE(&from, this);
  partition_.MergeFrom(from.partition_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_path()) {
      set_device_path(from.device_path());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstallerDisk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstallerDisk::CopyFrom(const InstallerDisk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstallerDisk::IsInitialized() const {
  
  return true;
}

void InstallerDisk::Swap(InstallerDisk* other) {
  if (other != this) {
    std::swap(device_path_, other->device_path_);
    partition_.Swap(&other->partition_);
    std::swap(model_, other->model_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstallerDisk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstallerDisk_descriptor_;
  metadata.reflection = InstallerDisk_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace os
}  // namespace config
}  // namespace cloudos

// @@protoc_insertion_point(global_scope)
