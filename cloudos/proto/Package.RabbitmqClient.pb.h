// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Package.RabbitmqClient.proto

#ifndef PROTOBUF_Package_2eRabbitmqClient_2eproto__INCLUDED
#define PROTOBUF_Package_2eRabbitmqClient_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace cloudos {
namespace config {
namespace package {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Package_2eRabbitmqClient_2eproto();
void protobuf_AssignDesc_Package_2eRabbitmqClient_2eproto();
void protobuf_ShutdownFile_Package_2eRabbitmqClient_2eproto();

class RabbitmqClient;

// ===================================================================

class RabbitmqClient : public ::google::protobuf::Message {
 public:
  RabbitmqClient();
  virtual ~RabbitmqClient();

  RabbitmqClient(const RabbitmqClient& from);

  inline RabbitmqClient& operator=(const RabbitmqClient& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RabbitmqClient& default_instance();

  void Swap(RabbitmqClient* other);

  // implements Message ----------------------------------------------

  RabbitmqClient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RabbitmqClient& from);
  void MergeFrom(const RabbitmqClient& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string host = 1;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  inline void set_allocated_host(::std::string* host);

  // optional uint32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // optional bool use_ssl = 4 [default = true];
  inline bool has_use_ssl() const;
  inline void clear_use_ssl();
  static const int kUseSslFieldNumber = 4;
  inline bool use_ssl() const;
  inline void set_use_ssl(bool value);

  // optional string userid = 6;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 6;
  inline const ::std::string& userid() const;
  inline void set_userid(const ::std::string& value);
  inline void set_userid(const char* value);
  inline void set_userid(const char* value, size_t size);
  inline ::std::string* mutable_userid();
  inline ::std::string* release_userid();
  inline void set_allocated_userid(::std::string* userid);

  // optional string password = 8;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 8;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional string virtual_host = 10;
  inline bool has_virtual_host() const;
  inline void clear_virtual_host();
  static const int kVirtualHostFieldNumber = 10;
  inline const ::std::string& virtual_host() const;
  inline void set_virtual_host(const ::std::string& value);
  inline void set_virtual_host(const char* value);
  inline void set_virtual_host(const char* value, size_t size);
  inline ::std::string* mutable_virtual_host();
  inline ::std::string* release_virtual_host();
  inline void set_allocated_virtual_host(::std::string* virtual_host);

  // optional bool durable_queues = 12 [default = false];
  inline bool has_durable_queues() const;
  inline void clear_durable_queues();
  static const int kDurableQueuesFieldNumber = 12;
  inline bool durable_queues() const;
  inline void set_durable_queues(bool value);

  // @@protoc_insertion_point(class_scope:cloudos.config.package.RabbitmqClient)
 private:
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_use_ssl();
  inline void clear_has_use_ssl();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_virtual_host();
  inline void clear_has_virtual_host();
  inline void set_has_durable_queues();
  inline void clear_has_durable_queues();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* host_;
  ::std::string* userid_;
  ::google::protobuf::uint32 port_;
  bool use_ssl_;
  bool durable_queues_;
  ::std::string* password_;
  ::std::string* virtual_host_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Package_2eRabbitmqClient_2eproto();
  friend void protobuf_AssignDesc_Package_2eRabbitmqClient_2eproto();
  friend void protobuf_ShutdownFile_Package_2eRabbitmqClient_2eproto();

  void InitAsDefaultInstance();
  static RabbitmqClient* default_instance_;
};
// ===================================================================


// ===================================================================

// RabbitmqClient

// optional string host = 1;
inline bool RabbitmqClient::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RabbitmqClient::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RabbitmqClient::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RabbitmqClient::clear_host() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& RabbitmqClient::host() const {
  return *host_;
}
inline void RabbitmqClient::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void RabbitmqClient::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void RabbitmqClient::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RabbitmqClient::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  return host_;
}
inline ::std::string* RabbitmqClient::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RabbitmqClient::set_allocated_host(::std::string* host) {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (host) {
    set_has_host();
    host_ = host;
  } else {
    clear_has_host();
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 port = 2;
inline bool RabbitmqClient::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RabbitmqClient::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RabbitmqClient::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RabbitmqClient::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 RabbitmqClient::port() const {
  return port_;
}
inline void RabbitmqClient::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// optional bool use_ssl = 4 [default = true];
inline bool RabbitmqClient::has_use_ssl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RabbitmqClient::set_has_use_ssl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RabbitmqClient::clear_has_use_ssl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RabbitmqClient::clear_use_ssl() {
  use_ssl_ = true;
  clear_has_use_ssl();
}
inline bool RabbitmqClient::use_ssl() const {
  return use_ssl_;
}
inline void RabbitmqClient::set_use_ssl(bool value) {
  set_has_use_ssl();
  use_ssl_ = value;
}

// optional string userid = 6;
inline bool RabbitmqClient::has_userid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RabbitmqClient::set_has_userid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RabbitmqClient::clear_has_userid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RabbitmqClient::clear_userid() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    userid_->clear();
  }
  clear_has_userid();
}
inline const ::std::string& RabbitmqClient::userid() const {
  return *userid_;
}
inline void RabbitmqClient::set_userid(const ::std::string& value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void RabbitmqClient::set_userid(const char* value) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(value);
}
inline void RabbitmqClient::set_userid(const char* value, size_t size) {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  userid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RabbitmqClient::mutable_userid() {
  set_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    userid_ = new ::std::string;
  }
  return userid_;
}
inline ::std::string* RabbitmqClient::release_userid() {
  clear_has_userid();
  if (userid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userid_;
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RabbitmqClient::set_allocated_userid(::std::string* userid) {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (userid) {
    set_has_userid();
    userid_ = userid;
  } else {
    clear_has_userid();
    userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string password = 8;
inline bool RabbitmqClient::has_password() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RabbitmqClient::set_has_password() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RabbitmqClient::clear_has_password() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RabbitmqClient::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& RabbitmqClient::password() const {
  return *password_;
}
inline void RabbitmqClient::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void RabbitmqClient::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void RabbitmqClient::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RabbitmqClient::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* RabbitmqClient::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RabbitmqClient::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string virtual_host = 10;
inline bool RabbitmqClient::has_virtual_host() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RabbitmqClient::set_has_virtual_host() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RabbitmqClient::clear_has_virtual_host() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RabbitmqClient::clear_virtual_host() {
  if (virtual_host_ != &::google::protobuf::internal::kEmptyString) {
    virtual_host_->clear();
  }
  clear_has_virtual_host();
}
inline const ::std::string& RabbitmqClient::virtual_host() const {
  return *virtual_host_;
}
inline void RabbitmqClient::set_virtual_host(const ::std::string& value) {
  set_has_virtual_host();
  if (virtual_host_ == &::google::protobuf::internal::kEmptyString) {
    virtual_host_ = new ::std::string;
  }
  virtual_host_->assign(value);
}
inline void RabbitmqClient::set_virtual_host(const char* value) {
  set_has_virtual_host();
  if (virtual_host_ == &::google::protobuf::internal::kEmptyString) {
    virtual_host_ = new ::std::string;
  }
  virtual_host_->assign(value);
}
inline void RabbitmqClient::set_virtual_host(const char* value, size_t size) {
  set_has_virtual_host();
  if (virtual_host_ == &::google::protobuf::internal::kEmptyString) {
    virtual_host_ = new ::std::string;
  }
  virtual_host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RabbitmqClient::mutable_virtual_host() {
  set_has_virtual_host();
  if (virtual_host_ == &::google::protobuf::internal::kEmptyString) {
    virtual_host_ = new ::std::string;
  }
  return virtual_host_;
}
inline ::std::string* RabbitmqClient::release_virtual_host() {
  clear_has_virtual_host();
  if (virtual_host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = virtual_host_;
    virtual_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RabbitmqClient::set_allocated_virtual_host(::std::string* virtual_host) {
  if (virtual_host_ != &::google::protobuf::internal::kEmptyString) {
    delete virtual_host_;
  }
  if (virtual_host) {
    set_has_virtual_host();
    virtual_host_ = virtual_host;
  } else {
    clear_has_virtual_host();
    virtual_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool durable_queues = 12 [default = false];
inline bool RabbitmqClient::has_durable_queues() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RabbitmqClient::set_has_durable_queues() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RabbitmqClient::clear_has_durable_queues() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RabbitmqClient::clear_durable_queues() {
  durable_queues_ = false;
  clear_has_durable_queues();
}
inline bool RabbitmqClient::durable_queues() const {
  return durable_queues_;
}
inline void RabbitmqClient::set_durable_queues(bool value) {
  set_has_durable_queues();
  durable_queues_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace package
}  // namespace config
}  // namespace cloudos

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Package_2eRabbitmqClient_2eproto__INCLUDED
