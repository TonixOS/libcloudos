// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OpenStack.CinderServer.proto

#ifndef PROTOBUF_OpenStack_2eCinderServer_2eproto__INCLUDED
#define PROTOBUF_OpenStack_2eCinderServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "OS.Network.pb.h"
// @@protoc_insertion_point(includes)

namespace cloudos {
namespace config {
namespace openstack {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_OpenStack_2eCinderServer_2eproto();
void protobuf_AssignDesc_OpenStack_2eCinderServer_2eproto();
void protobuf_ShutdownFile_OpenStack_2eCinderServer_2eproto();

class CinderServer;

// ===================================================================

class CinderServer : public ::google::protobuf::Message {
 public:
  CinderServer();
  virtual ~CinderServer();

  CinderServer(const CinderServer& from);

  inline CinderServer& operator=(const CinderServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CinderServer& default_instance();

  void Swap(CinderServer* other);

  // implements Message ----------------------------------------------

  CinderServer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CinderServer& from);
  void MergeFrom(const CinderServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string host = 2;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 2;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  inline void set_allocated_host(::std::string* host);

  // optional uint32 port = 4 [default = 8776];
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // optional string volume_group = 8 [default = "vg_storage"];
  inline bool has_volume_group() const;
  inline void clear_volume_group();
  static const int kVolumeGroupFieldNumber = 8;
  inline const ::std::string& volume_group() const;
  inline void set_volume_group(const ::std::string& value);
  inline void set_volume_group(const char* value);
  inline void set_volume_group(const char* value, size_t size);
  inline ::std::string* mutable_volume_group();
  inline ::std::string* release_volume_group();
  inline void set_allocated_volume_group(::std::string* volume_group);

  // optional .cloudos.config.os.WebProtocol protocol = 12;
  inline bool has_protocol() const;
  inline void clear_protocol();
  static const int kProtocolFieldNumber = 12;
  inline const ::cloudos::config::os::WebProtocol& protocol() const;
  inline ::cloudos::config::os::WebProtocol* mutable_protocol();
  inline ::cloudos::config::os::WebProtocol* release_protocol();
  inline void set_allocated_protocol(::cloudos::config::os::WebProtocol* protocol);

  // optional .cloudos.config.os.SSLSettings ssl_settings = 14;
  inline bool has_ssl_settings() const;
  inline void clear_ssl_settings();
  static const int kSslSettingsFieldNumber = 14;
  inline const ::cloudos::config::os::SSLSettings& ssl_settings() const;
  inline ::cloudos::config::os::SSLSettings* mutable_ssl_settings();
  inline ::cloudos::config::os::SSLSettings* release_ssl_settings();
  inline void set_allocated_ssl_settings(::cloudos::config::os::SSLSettings* ssl_settings);

  // @@protoc_insertion_point(class_scope:cloudos.config.openstack.CinderServer)
 private:
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_volume_group();
  inline void clear_has_volume_group();
  inline void set_has_protocol();
  inline void clear_has_protocol();
  inline void set_has_ssl_settings();
  inline void clear_has_ssl_settings();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* host_;
  ::std::string* volume_group_;
  static ::std::string* _default_volume_group_;
  ::cloudos::config::os::WebProtocol* protocol_;
  ::cloudos::config::os::SSLSettings* ssl_settings_;
  ::google::protobuf::uint32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_OpenStack_2eCinderServer_2eproto();
  friend void protobuf_AssignDesc_OpenStack_2eCinderServer_2eproto();
  friend void protobuf_ShutdownFile_OpenStack_2eCinderServer_2eproto();

  void InitAsDefaultInstance();
  static CinderServer* default_instance_;
};
// ===================================================================


// ===================================================================

// CinderServer

// optional string host = 2;
inline bool CinderServer::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CinderServer::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CinderServer::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CinderServer::clear_host() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& CinderServer::host() const {
  return *host_;
}
inline void CinderServer::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void CinderServer::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void CinderServer::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CinderServer::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  return host_;
}
inline ::std::string* CinderServer::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CinderServer::set_allocated_host(::std::string* host) {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (host) {
    set_has_host();
    host_ = host;
  } else {
    clear_has_host();
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 port = 4 [default = 8776];
inline bool CinderServer::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CinderServer::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CinderServer::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CinderServer::clear_port() {
  port_ = 8776u;
  clear_has_port();
}
inline ::google::protobuf::uint32 CinderServer::port() const {
  return port_;
}
inline void CinderServer::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// optional string volume_group = 8 [default = "vg_storage"];
inline bool CinderServer::has_volume_group() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CinderServer::set_has_volume_group() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CinderServer::clear_has_volume_group() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CinderServer::clear_volume_group() {
  if (volume_group_ != _default_volume_group_) {
    volume_group_->assign(*_default_volume_group_);
  }
  clear_has_volume_group();
}
inline const ::std::string& CinderServer::volume_group() const {
  return *volume_group_;
}
inline void CinderServer::set_volume_group(const ::std::string& value) {
  set_has_volume_group();
  if (volume_group_ == _default_volume_group_) {
    volume_group_ = new ::std::string;
  }
  volume_group_->assign(value);
}
inline void CinderServer::set_volume_group(const char* value) {
  set_has_volume_group();
  if (volume_group_ == _default_volume_group_) {
    volume_group_ = new ::std::string;
  }
  volume_group_->assign(value);
}
inline void CinderServer::set_volume_group(const char* value, size_t size) {
  set_has_volume_group();
  if (volume_group_ == _default_volume_group_) {
    volume_group_ = new ::std::string;
  }
  volume_group_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CinderServer::mutable_volume_group() {
  set_has_volume_group();
  if (volume_group_ == _default_volume_group_) {
    volume_group_ = new ::std::string(*_default_volume_group_);
  }
  return volume_group_;
}
inline ::std::string* CinderServer::release_volume_group() {
  clear_has_volume_group();
  if (volume_group_ == _default_volume_group_) {
    return NULL;
  } else {
    ::std::string* temp = volume_group_;
    volume_group_ = const_cast< ::std::string*>(_default_volume_group_);
    return temp;
  }
}
inline void CinderServer::set_allocated_volume_group(::std::string* volume_group) {
  if (volume_group_ != _default_volume_group_) {
    delete volume_group_;
  }
  if (volume_group) {
    set_has_volume_group();
    volume_group_ = volume_group;
  } else {
    clear_has_volume_group();
    volume_group_ = const_cast< ::std::string*>(_default_volume_group_);
  }
}

// optional .cloudos.config.os.WebProtocol protocol = 12;
inline bool CinderServer::has_protocol() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CinderServer::set_has_protocol() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CinderServer::clear_has_protocol() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CinderServer::clear_protocol() {
  if (protocol_ != NULL) protocol_->::cloudos::config::os::WebProtocol::Clear();
  clear_has_protocol();
}
inline const ::cloudos::config::os::WebProtocol& CinderServer::protocol() const {
  return protocol_ != NULL ? *protocol_ : *default_instance_->protocol_;
}
inline ::cloudos::config::os::WebProtocol* CinderServer::mutable_protocol() {
  set_has_protocol();
  if (protocol_ == NULL) protocol_ = new ::cloudos::config::os::WebProtocol;
  return protocol_;
}
inline ::cloudos::config::os::WebProtocol* CinderServer::release_protocol() {
  clear_has_protocol();
  ::cloudos::config::os::WebProtocol* temp = protocol_;
  protocol_ = NULL;
  return temp;
}
inline void CinderServer::set_allocated_protocol(::cloudos::config::os::WebProtocol* protocol) {
  delete protocol_;
  protocol_ = protocol;
  if (protocol) {
    set_has_protocol();
  } else {
    clear_has_protocol();
  }
}

// optional .cloudos.config.os.SSLSettings ssl_settings = 14;
inline bool CinderServer::has_ssl_settings() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CinderServer::set_has_ssl_settings() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CinderServer::clear_has_ssl_settings() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CinderServer::clear_ssl_settings() {
  if (ssl_settings_ != NULL) ssl_settings_->::cloudos::config::os::SSLSettings::Clear();
  clear_has_ssl_settings();
}
inline const ::cloudos::config::os::SSLSettings& CinderServer::ssl_settings() const {
  return ssl_settings_ != NULL ? *ssl_settings_ : *default_instance_->ssl_settings_;
}
inline ::cloudos::config::os::SSLSettings* CinderServer::mutable_ssl_settings() {
  set_has_ssl_settings();
  if (ssl_settings_ == NULL) ssl_settings_ = new ::cloudos::config::os::SSLSettings;
  return ssl_settings_;
}
inline ::cloudos::config::os::SSLSettings* CinderServer::release_ssl_settings() {
  clear_has_ssl_settings();
  ::cloudos::config::os::SSLSettings* temp = ssl_settings_;
  ssl_settings_ = NULL;
  return temp;
}
inline void CinderServer::set_allocated_ssl_settings(::cloudos::config::os::SSLSettings* ssl_settings) {
  delete ssl_settings_;
  ssl_settings_ = ssl_settings;
  if (ssl_settings) {
    set_has_ssl_settings();
  } else {
    clear_has_ssl_settings();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace openstack
}  // namespace config
}  // namespace cloudos

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_OpenStack_2eCinderServer_2eproto__INCLUDED
