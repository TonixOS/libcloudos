// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OS.HW.HDDisk.proto

#ifndef PROTOBUF_OS_2eHW_2eHDDisk_2eproto__INCLUDED
#define PROTOBUF_OS_2eHW_2eHDDisk_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace cloudos {
namespace config {
namespace os {
namespace hw {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_OS_2eHW_2eHDDisk_2eproto();
void protobuf_AssignDesc_OS_2eHW_2eHDDisk_2eproto();
void protobuf_ShutdownFile_OS_2eHW_2eHDDisk_2eproto();

class HDDiskPartition;
class HDDisk;

enum HDDiskPartition_PartType {
  HDDiskPartition_PartType_EXT2 = 0,
  HDDiskPartition_PartType_LVM = 1
};
bool HDDiskPartition_PartType_IsValid(int value);
const HDDiskPartition_PartType HDDiskPartition_PartType_PartType_MIN = HDDiskPartition_PartType_EXT2;
const HDDiskPartition_PartType HDDiskPartition_PartType_PartType_MAX = HDDiskPartition_PartType_LVM;
const int HDDiskPartition_PartType_PartType_ARRAYSIZE = HDDiskPartition_PartType_PartType_MAX + 1;

const ::google::protobuf::EnumDescriptor* HDDiskPartition_PartType_descriptor();
inline const ::std::string& HDDiskPartition_PartType_Name(HDDiskPartition_PartType value) {
  return ::google::protobuf::internal::NameOfEnum(
    HDDiskPartition_PartType_descriptor(), value);
}
inline bool HDDiskPartition_PartType_Parse(
    const ::std::string& name, HDDiskPartition_PartType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HDDiskPartition_PartType>(
    HDDiskPartition_PartType_descriptor(), name, value);
}
// ===================================================================

class HDDiskPartition : public ::google::protobuf::Message {
 public:
  HDDiskPartition();
  virtual ~HDDiskPartition();

  HDDiskPartition(const HDDiskPartition& from);

  inline HDDiskPartition& operator=(const HDDiskPartition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HDDiskPartition& default_instance();

  void Swap(HDDiskPartition* other);

  // implements Message ----------------------------------------------

  HDDiskPartition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HDDiskPartition& from);
  void MergeFrom(const HDDiskPartition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef HDDiskPartition_PartType PartType;
  static const PartType EXT2 = HDDiskPartition_PartType_EXT2;
  static const PartType LVM = HDDiskPartition_PartType_LVM;
  static inline bool PartType_IsValid(int value) {
    return HDDiskPartition_PartType_IsValid(value);
  }
  static const PartType PartType_MIN =
    HDDiskPartition_PartType_PartType_MIN;
  static const PartType PartType_MAX =
    HDDiskPartition_PartType_PartType_MAX;
  static const int PartType_ARRAYSIZE =
    HDDiskPartition_PartType_PartType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PartType_descriptor() {
    return HDDiskPartition_PartType_descriptor();
  }
  static inline const ::std::string& PartType_Name(PartType value) {
    return HDDiskPartition_PartType_Name(value);
  }
  static inline bool PartType_Parse(const ::std::string& name,
      PartType* value) {
    return HDDiskPartition_PartType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string label = 1;
  inline bool has_label() const;
  inline void clear_label();
  static const int kLabelFieldNumber = 1;
  inline const ::std::string& label() const;
  inline void set_label(const ::std::string& value);
  inline void set_label(const char* value);
  inline void set_label(const char* value, size_t size);
  inline ::std::string* mutable_label();
  inline ::std::string* release_label();
  inline void set_allocated_label(::std::string* label);

  // optional string uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const char* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // optional .cloudos.config.os.hw.HDDiskPartition.PartType type = 4 [default = EXT2];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::cloudos::config::os::hw::HDDiskPartition_PartType type() const;
  inline void set_type(::cloudos::config::os::hw::HDDiskPartition_PartType value);

  // optional string index = 5;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 5;
  inline const ::std::string& index() const;
  inline void set_index(const ::std::string& value);
  inline void set_index(const char* value);
  inline void set_index(const char* value, size_t size);
  inline ::std::string* mutable_index();
  inline ::std::string* release_index();
  inline void set_allocated_index(::std::string* index);

  // optional string filesystem = 6 [default = "ext4"];
  inline bool has_filesystem() const;
  inline void clear_filesystem();
  static const int kFilesystemFieldNumber = 6;
  inline const ::std::string& filesystem() const;
  inline void set_filesystem(const ::std::string& value);
  inline void set_filesystem(const char* value);
  inline void set_filesystem(const char* value, size_t size);
  inline ::std::string* mutable_filesystem();
  inline ::std::string* release_filesystem();
  inline void set_allocated_filesystem(::std::string* filesystem);

  // optional string mountpoint = 8;
  inline bool has_mountpoint() const;
  inline void clear_mountpoint();
  static const int kMountpointFieldNumber = 8;
  inline const ::std::string& mountpoint() const;
  inline void set_mountpoint(const ::std::string& value);
  inline void set_mountpoint(const char* value);
  inline void set_mountpoint(const char* value, size_t size);
  inline ::std::string* mutable_mountpoint();
  inline ::std::string* release_mountpoint();
  inline void set_allocated_mountpoint(::std::string* mountpoint);

  // optional string mountoptions = 10;
  inline bool has_mountoptions() const;
  inline void clear_mountoptions();
  static const int kMountoptionsFieldNumber = 10;
  inline const ::std::string& mountoptions() const;
  inline void set_mountoptions(const ::std::string& value);
  inline void set_mountoptions(const char* value);
  inline void set_mountoptions(const char* value, size_t size);
  inline ::std::string* mutable_mountoptions();
  inline ::std::string* release_mountoptions();
  inline void set_allocated_mountoptions(::std::string* mountoptions);

  // optional uint64 size = 12;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 12;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);

  // optional string size_unit = 14 [default = "G"];
  inline bool has_size_unit() const;
  inline void clear_size_unit();
  static const int kSizeUnitFieldNumber = 14;
  inline const ::std::string& size_unit() const;
  inline void set_size_unit(const ::std::string& value);
  inline void set_size_unit(const char* value);
  inline void set_size_unit(const char* value, size_t size);
  inline ::std::string* mutable_size_unit();
  inline ::std::string* release_size_unit();
  inline void set_allocated_size_unit(::std::string* size_unit);

  // @@protoc_insertion_point(class_scope:cloudos.config.os.hw.HDDiskPartition)
 private:
  inline void set_has_label();
  inline void clear_has_label();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_filesystem();
  inline void clear_has_filesystem();
  inline void set_has_mountpoint();
  inline void clear_has_mountpoint();
  inline void set_has_mountoptions();
  inline void clear_has_mountoptions();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_size_unit();
  inline void clear_has_size_unit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* label_;
  ::std::string* uuid_;
  ::std::string* index_;
  ::std::string* filesystem_;
  static ::std::string* _default_filesystem_;
  ::std::string* mountpoint_;
  ::std::string* mountoptions_;
  ::google::protobuf::uint64 size_;
  ::std::string* size_unit_;
  static ::std::string* _default_size_unit_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_OS_2eHW_2eHDDisk_2eproto();
  friend void protobuf_AssignDesc_OS_2eHW_2eHDDisk_2eproto();
  friend void protobuf_ShutdownFile_OS_2eHW_2eHDDisk_2eproto();

  void InitAsDefaultInstance();
  static HDDiskPartition* default_instance_;
};
// -------------------------------------------------------------------

class HDDisk : public ::google::protobuf::Message {
 public:
  HDDisk();
  virtual ~HDDisk();

  HDDisk(const HDDisk& from);

  inline HDDisk& operator=(const HDDisk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HDDisk& default_instance();

  void Swap(HDDisk* other);

  // implements Message ----------------------------------------------

  HDDisk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HDDisk& from);
  void MergeFrom(const HDDisk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline const ::std::string& index() const;
  inline void set_index(const ::std::string& value);
  inline void set_index(const char* value);
  inline void set_index(const char* value, size_t size);
  inline ::std::string* mutable_index();
  inline ::std::string* release_index();
  inline void set_allocated_index(::std::string* index);

  // repeated .cloudos.config.os.hw.HDDiskPartition partition = 4;
  inline int partition_size() const;
  inline void clear_partition();
  static const int kPartitionFieldNumber = 4;
  inline const ::cloudos::config::os::hw::HDDiskPartition& partition(int index) const;
  inline ::cloudos::config::os::hw::HDDiskPartition* mutable_partition(int index);
  inline ::cloudos::config::os::hw::HDDiskPartition* add_partition();
  inline const ::google::protobuf::RepeatedPtrField< ::cloudos::config::os::hw::HDDiskPartition >&
      partition() const;
  inline ::google::protobuf::RepeatedPtrField< ::cloudos::config::os::hw::HDDiskPartition >*
      mutable_partition();

  // optional string model = 6;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 6;
  inline const ::std::string& model() const;
  inline void set_model(const ::std::string& value);
  inline void set_model(const char* value);
  inline void set_model(const char* value, size_t size);
  inline ::std::string* mutable_model();
  inline ::std::string* release_model();
  inline void set_allocated_model(::std::string* model);

  // optional uint64 size = 8;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 8;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:cloudos.config.os.hw.HDDisk)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_size();
  inline void clear_has_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* index_;
  ::google::protobuf::RepeatedPtrField< ::cloudos::config::os::hw::HDDiskPartition > partition_;
  ::std::string* model_;
  ::google::protobuf::uint64 size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_OS_2eHW_2eHDDisk_2eproto();
  friend void protobuf_AssignDesc_OS_2eHW_2eHDDisk_2eproto();
  friend void protobuf_ShutdownFile_OS_2eHW_2eHDDisk_2eproto();

  void InitAsDefaultInstance();
  static HDDisk* default_instance_;
};
// ===================================================================


// ===================================================================

// HDDiskPartition

// optional string label = 1;
inline bool HDDiskPartition::has_label() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HDDiskPartition::set_has_label() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HDDiskPartition::clear_has_label() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HDDiskPartition::clear_label() {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    label_->clear();
  }
  clear_has_label();
}
inline const ::std::string& HDDiskPartition::label() const {
  return *label_;
}
inline void HDDiskPartition::set_label(const ::std::string& value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void HDDiskPartition::set_label(const char* value) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(value);
}
inline void HDDiskPartition::set_label(const char* value, size_t size) {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  label_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HDDiskPartition::mutable_label() {
  set_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    label_ = new ::std::string;
  }
  return label_;
}
inline ::std::string* HDDiskPartition::release_label() {
  clear_has_label();
  if (label_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = label_;
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HDDiskPartition::set_allocated_label(::std::string* label) {
  if (label_ != &::google::protobuf::internal::kEmptyString) {
    delete label_;
  }
  if (label) {
    set_has_label();
    label_ = label;
  } else {
    clear_has_label();
    label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string uuid = 2;
inline bool HDDiskPartition::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HDDiskPartition::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HDDiskPartition::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HDDiskPartition::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& HDDiskPartition::uuid() const {
  return *uuid_;
}
inline void HDDiskPartition::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void HDDiskPartition::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void HDDiskPartition::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HDDiskPartition::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* HDDiskPartition::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HDDiskPartition::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .cloudos.config.os.hw.HDDiskPartition.PartType type = 4 [default = EXT2];
inline bool HDDiskPartition::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HDDiskPartition::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HDDiskPartition::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HDDiskPartition::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::cloudos::config::os::hw::HDDiskPartition_PartType HDDiskPartition::type() const {
  return static_cast< ::cloudos::config::os::hw::HDDiskPartition_PartType >(type_);
}
inline void HDDiskPartition::set_type(::cloudos::config::os::hw::HDDiskPartition_PartType value) {
  assert(::cloudos::config::os::hw::HDDiskPartition_PartType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string index = 5;
inline bool HDDiskPartition::has_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HDDiskPartition::set_has_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HDDiskPartition::clear_has_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HDDiskPartition::clear_index() {
  if (index_ != &::google::protobuf::internal::kEmptyString) {
    index_->clear();
  }
  clear_has_index();
}
inline const ::std::string& HDDiskPartition::index() const {
  return *index_;
}
inline void HDDiskPartition::set_index(const ::std::string& value) {
  set_has_index();
  if (index_ == &::google::protobuf::internal::kEmptyString) {
    index_ = new ::std::string;
  }
  index_->assign(value);
}
inline void HDDiskPartition::set_index(const char* value) {
  set_has_index();
  if (index_ == &::google::protobuf::internal::kEmptyString) {
    index_ = new ::std::string;
  }
  index_->assign(value);
}
inline void HDDiskPartition::set_index(const char* value, size_t size) {
  set_has_index();
  if (index_ == &::google::protobuf::internal::kEmptyString) {
    index_ = new ::std::string;
  }
  index_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HDDiskPartition::mutable_index() {
  set_has_index();
  if (index_ == &::google::protobuf::internal::kEmptyString) {
    index_ = new ::std::string;
  }
  return index_;
}
inline ::std::string* HDDiskPartition::release_index() {
  clear_has_index();
  if (index_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = index_;
    index_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HDDiskPartition::set_allocated_index(::std::string* index) {
  if (index_ != &::google::protobuf::internal::kEmptyString) {
    delete index_;
  }
  if (index) {
    set_has_index();
    index_ = index;
  } else {
    clear_has_index();
    index_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string filesystem = 6 [default = "ext4"];
inline bool HDDiskPartition::has_filesystem() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HDDiskPartition::set_has_filesystem() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HDDiskPartition::clear_has_filesystem() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HDDiskPartition::clear_filesystem() {
  if (filesystem_ != _default_filesystem_) {
    filesystem_->assign(*_default_filesystem_);
  }
  clear_has_filesystem();
}
inline const ::std::string& HDDiskPartition::filesystem() const {
  return *filesystem_;
}
inline void HDDiskPartition::set_filesystem(const ::std::string& value) {
  set_has_filesystem();
  if (filesystem_ == _default_filesystem_) {
    filesystem_ = new ::std::string;
  }
  filesystem_->assign(value);
}
inline void HDDiskPartition::set_filesystem(const char* value) {
  set_has_filesystem();
  if (filesystem_ == _default_filesystem_) {
    filesystem_ = new ::std::string;
  }
  filesystem_->assign(value);
}
inline void HDDiskPartition::set_filesystem(const char* value, size_t size) {
  set_has_filesystem();
  if (filesystem_ == _default_filesystem_) {
    filesystem_ = new ::std::string;
  }
  filesystem_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HDDiskPartition::mutable_filesystem() {
  set_has_filesystem();
  if (filesystem_ == _default_filesystem_) {
    filesystem_ = new ::std::string(*_default_filesystem_);
  }
  return filesystem_;
}
inline ::std::string* HDDiskPartition::release_filesystem() {
  clear_has_filesystem();
  if (filesystem_ == _default_filesystem_) {
    return NULL;
  } else {
    ::std::string* temp = filesystem_;
    filesystem_ = const_cast< ::std::string*>(_default_filesystem_);
    return temp;
  }
}
inline void HDDiskPartition::set_allocated_filesystem(::std::string* filesystem) {
  if (filesystem_ != _default_filesystem_) {
    delete filesystem_;
  }
  if (filesystem) {
    set_has_filesystem();
    filesystem_ = filesystem;
  } else {
    clear_has_filesystem();
    filesystem_ = const_cast< ::std::string*>(_default_filesystem_);
  }
}

// optional string mountpoint = 8;
inline bool HDDiskPartition::has_mountpoint() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HDDiskPartition::set_has_mountpoint() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HDDiskPartition::clear_has_mountpoint() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HDDiskPartition::clear_mountpoint() {
  if (mountpoint_ != &::google::protobuf::internal::kEmptyString) {
    mountpoint_->clear();
  }
  clear_has_mountpoint();
}
inline const ::std::string& HDDiskPartition::mountpoint() const {
  return *mountpoint_;
}
inline void HDDiskPartition::set_mountpoint(const ::std::string& value) {
  set_has_mountpoint();
  if (mountpoint_ == &::google::protobuf::internal::kEmptyString) {
    mountpoint_ = new ::std::string;
  }
  mountpoint_->assign(value);
}
inline void HDDiskPartition::set_mountpoint(const char* value) {
  set_has_mountpoint();
  if (mountpoint_ == &::google::protobuf::internal::kEmptyString) {
    mountpoint_ = new ::std::string;
  }
  mountpoint_->assign(value);
}
inline void HDDiskPartition::set_mountpoint(const char* value, size_t size) {
  set_has_mountpoint();
  if (mountpoint_ == &::google::protobuf::internal::kEmptyString) {
    mountpoint_ = new ::std::string;
  }
  mountpoint_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HDDiskPartition::mutable_mountpoint() {
  set_has_mountpoint();
  if (mountpoint_ == &::google::protobuf::internal::kEmptyString) {
    mountpoint_ = new ::std::string;
  }
  return mountpoint_;
}
inline ::std::string* HDDiskPartition::release_mountpoint() {
  clear_has_mountpoint();
  if (mountpoint_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mountpoint_;
    mountpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HDDiskPartition::set_allocated_mountpoint(::std::string* mountpoint) {
  if (mountpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete mountpoint_;
  }
  if (mountpoint) {
    set_has_mountpoint();
    mountpoint_ = mountpoint;
  } else {
    clear_has_mountpoint();
    mountpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string mountoptions = 10;
inline bool HDDiskPartition::has_mountoptions() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HDDiskPartition::set_has_mountoptions() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HDDiskPartition::clear_has_mountoptions() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HDDiskPartition::clear_mountoptions() {
  if (mountoptions_ != &::google::protobuf::internal::kEmptyString) {
    mountoptions_->clear();
  }
  clear_has_mountoptions();
}
inline const ::std::string& HDDiskPartition::mountoptions() const {
  return *mountoptions_;
}
inline void HDDiskPartition::set_mountoptions(const ::std::string& value) {
  set_has_mountoptions();
  if (mountoptions_ == &::google::protobuf::internal::kEmptyString) {
    mountoptions_ = new ::std::string;
  }
  mountoptions_->assign(value);
}
inline void HDDiskPartition::set_mountoptions(const char* value) {
  set_has_mountoptions();
  if (mountoptions_ == &::google::protobuf::internal::kEmptyString) {
    mountoptions_ = new ::std::string;
  }
  mountoptions_->assign(value);
}
inline void HDDiskPartition::set_mountoptions(const char* value, size_t size) {
  set_has_mountoptions();
  if (mountoptions_ == &::google::protobuf::internal::kEmptyString) {
    mountoptions_ = new ::std::string;
  }
  mountoptions_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HDDiskPartition::mutable_mountoptions() {
  set_has_mountoptions();
  if (mountoptions_ == &::google::protobuf::internal::kEmptyString) {
    mountoptions_ = new ::std::string;
  }
  return mountoptions_;
}
inline ::std::string* HDDiskPartition::release_mountoptions() {
  clear_has_mountoptions();
  if (mountoptions_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mountoptions_;
    mountoptions_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HDDiskPartition::set_allocated_mountoptions(::std::string* mountoptions) {
  if (mountoptions_ != &::google::protobuf::internal::kEmptyString) {
    delete mountoptions_;
  }
  if (mountoptions) {
    set_has_mountoptions();
    mountoptions_ = mountoptions;
  } else {
    clear_has_mountoptions();
    mountoptions_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 size = 12;
inline bool HDDiskPartition::has_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HDDiskPartition::set_has_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HDDiskPartition::clear_has_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HDDiskPartition::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::uint64 HDDiskPartition::size() const {
  return size_;
}
inline void HDDiskPartition::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
}

// optional string size_unit = 14 [default = "G"];
inline bool HDDiskPartition::has_size_unit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HDDiskPartition::set_has_size_unit() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HDDiskPartition::clear_has_size_unit() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HDDiskPartition::clear_size_unit() {
  if (size_unit_ != _default_size_unit_) {
    size_unit_->assign(*_default_size_unit_);
  }
  clear_has_size_unit();
}
inline const ::std::string& HDDiskPartition::size_unit() const {
  return *size_unit_;
}
inline void HDDiskPartition::set_size_unit(const ::std::string& value) {
  set_has_size_unit();
  if (size_unit_ == _default_size_unit_) {
    size_unit_ = new ::std::string;
  }
  size_unit_->assign(value);
}
inline void HDDiskPartition::set_size_unit(const char* value) {
  set_has_size_unit();
  if (size_unit_ == _default_size_unit_) {
    size_unit_ = new ::std::string;
  }
  size_unit_->assign(value);
}
inline void HDDiskPartition::set_size_unit(const char* value, size_t size) {
  set_has_size_unit();
  if (size_unit_ == _default_size_unit_) {
    size_unit_ = new ::std::string;
  }
  size_unit_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HDDiskPartition::mutable_size_unit() {
  set_has_size_unit();
  if (size_unit_ == _default_size_unit_) {
    size_unit_ = new ::std::string(*_default_size_unit_);
  }
  return size_unit_;
}
inline ::std::string* HDDiskPartition::release_size_unit() {
  clear_has_size_unit();
  if (size_unit_ == _default_size_unit_) {
    return NULL;
  } else {
    ::std::string* temp = size_unit_;
    size_unit_ = const_cast< ::std::string*>(_default_size_unit_);
    return temp;
  }
}
inline void HDDiskPartition::set_allocated_size_unit(::std::string* size_unit) {
  if (size_unit_ != _default_size_unit_) {
    delete size_unit_;
  }
  if (size_unit) {
    set_has_size_unit();
    size_unit_ = size_unit;
  } else {
    clear_has_size_unit();
    size_unit_ = const_cast< ::std::string*>(_default_size_unit_);
  }
}

// -------------------------------------------------------------------

// HDDisk

// optional string index = 2;
inline bool HDDisk::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HDDisk::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HDDisk::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HDDisk::clear_index() {
  if (index_ != &::google::protobuf::internal::kEmptyString) {
    index_->clear();
  }
  clear_has_index();
}
inline const ::std::string& HDDisk::index() const {
  return *index_;
}
inline void HDDisk::set_index(const ::std::string& value) {
  set_has_index();
  if (index_ == &::google::protobuf::internal::kEmptyString) {
    index_ = new ::std::string;
  }
  index_->assign(value);
}
inline void HDDisk::set_index(const char* value) {
  set_has_index();
  if (index_ == &::google::protobuf::internal::kEmptyString) {
    index_ = new ::std::string;
  }
  index_->assign(value);
}
inline void HDDisk::set_index(const char* value, size_t size) {
  set_has_index();
  if (index_ == &::google::protobuf::internal::kEmptyString) {
    index_ = new ::std::string;
  }
  index_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HDDisk::mutable_index() {
  set_has_index();
  if (index_ == &::google::protobuf::internal::kEmptyString) {
    index_ = new ::std::string;
  }
  return index_;
}
inline ::std::string* HDDisk::release_index() {
  clear_has_index();
  if (index_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = index_;
    index_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HDDisk::set_allocated_index(::std::string* index) {
  if (index_ != &::google::protobuf::internal::kEmptyString) {
    delete index_;
  }
  if (index) {
    set_has_index();
    index_ = index;
  } else {
    clear_has_index();
    index_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .cloudos.config.os.hw.HDDiskPartition partition = 4;
inline int HDDisk::partition_size() const {
  return partition_.size();
}
inline void HDDisk::clear_partition() {
  partition_.Clear();
}
inline const ::cloudos::config::os::hw::HDDiskPartition& HDDisk::partition(int index) const {
  return partition_.Get(index);
}
inline ::cloudos::config::os::hw::HDDiskPartition* HDDisk::mutable_partition(int index) {
  return partition_.Mutable(index);
}
inline ::cloudos::config::os::hw::HDDiskPartition* HDDisk::add_partition() {
  return partition_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::cloudos::config::os::hw::HDDiskPartition >&
HDDisk::partition() const {
  return partition_;
}
inline ::google::protobuf::RepeatedPtrField< ::cloudos::config::os::hw::HDDiskPartition >*
HDDisk::mutable_partition() {
  return &partition_;
}

// optional string model = 6;
inline bool HDDisk::has_model() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HDDisk::set_has_model() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HDDisk::clear_has_model() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HDDisk::clear_model() {
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    model_->clear();
  }
  clear_has_model();
}
inline const ::std::string& HDDisk::model() const {
  return *model_;
}
inline void HDDisk::set_model(const ::std::string& value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  model_->assign(value);
}
inline void HDDisk::set_model(const char* value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  model_->assign(value);
}
inline void HDDisk::set_model(const char* value, size_t size) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  model_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HDDisk::mutable_model() {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  return model_;
}
inline ::std::string* HDDisk::release_model() {
  clear_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = model_;
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HDDisk::set_allocated_model(::std::string* model) {
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    delete model_;
  }
  if (model) {
    set_has_model();
    model_ = model;
  } else {
    clear_has_model();
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 size = 8;
inline bool HDDisk::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HDDisk::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HDDisk::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HDDisk::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::uint64 HDDisk::size() const {
  return size_;
}
inline void HDDisk::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hw
}  // namespace os
}  // namespace config
}  // namespace cloudos

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cloudos::config::os::hw::HDDiskPartition_PartType>() {
  return ::cloudos::config::os::hw::HDDiskPartition_PartType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_OS_2eHW_2eHDDisk_2eproto__INCLUDED
