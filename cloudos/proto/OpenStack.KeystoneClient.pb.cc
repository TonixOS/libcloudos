// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OpenStack.KeystoneClient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "OpenStack.KeystoneClient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cloudos {
namespace config {
namespace openstack {

namespace {

const ::google::protobuf::Descriptor* KeystoneClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeystoneClient_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_OpenStack_2eKeystoneClient_2eproto() {
  protobuf_AddDesc_OpenStack_2eKeystoneClient_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "OpenStack.KeystoneClient.proto");
  GOOGLE_CHECK(file != NULL);
  KeystoneClient_descriptor_ = file->message_type(0);
  static const int KeystoneClient_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeystoneClient, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeystoneClient, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeystoneClient, protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeystoneClient, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeystoneClient, admin_tenant_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeystoneClient, admin_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeystoneClient, admin_password_),
  };
  KeystoneClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeystoneClient_descriptor_,
      KeystoneClient::default_instance_,
      KeystoneClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeystoneClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeystoneClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeystoneClient));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_OpenStack_2eKeystoneClient_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeystoneClient_descriptor_, &KeystoneClient::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_OpenStack_2eKeystoneClient_2eproto() {
  delete KeystoneClient::default_instance_;
  delete KeystoneClient_reflection_;
}

void protobuf_AddDesc_OpenStack_2eKeystoneClient_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cloudos::config::os::protobuf_AddDesc_OS_2eNetwork_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036OpenStack.KeystoneClient.proto\022\030cloudo"
    "s.config.openstack\032\020OS.Network.proto\"\262\001\n"
    "\016KeystoneClient\022\014\n\004host\030\001 \001(\t\022\014\n\004port\030\002 "
    "\001(\r\0220\n\010protocol\030\004 \001(\0132\036.cloudos.config.o"
    "s.WebProtocol\022\013\n\003uri\030\006 \001(\t\022\031\n\021admin_tena"
    "nt_name\030\010 \001(\t\022\022\n\nadmin_user\030\n \001(\t\022\026\n\016adm"
    "in_password\030\014 \001(\t", 257);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "OpenStack.KeystoneClient.proto", &protobuf_RegisterTypes);
  KeystoneClient::default_instance_ = new KeystoneClient();
  KeystoneClient::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_OpenStack_2eKeystoneClient_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_OpenStack_2eKeystoneClient_2eproto {
  StaticDescriptorInitializer_OpenStack_2eKeystoneClient_2eproto() {
    protobuf_AddDesc_OpenStack_2eKeystoneClient_2eproto();
  }
} static_descriptor_initializer_OpenStack_2eKeystoneClient_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int KeystoneClient::kHostFieldNumber;
const int KeystoneClient::kPortFieldNumber;
const int KeystoneClient::kProtocolFieldNumber;
const int KeystoneClient::kUriFieldNumber;
const int KeystoneClient::kAdminTenantNameFieldNumber;
const int KeystoneClient::kAdminUserFieldNumber;
const int KeystoneClient::kAdminPasswordFieldNumber;
#endif  // !_MSC_VER

KeystoneClient::KeystoneClient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeystoneClient::InitAsDefaultInstance() {
  protocol_ = const_cast< ::cloudos::config::os::WebProtocol*>(&::cloudos::config::os::WebProtocol::default_instance());
}

KeystoneClient::KeystoneClient(const KeystoneClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeystoneClient::SharedCtor() {
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  protocol_ = NULL;
  uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  admin_tenant_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  admin_user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  admin_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeystoneClient::~KeystoneClient() {
  SharedDtor();
}

void KeystoneClient::SharedDtor() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (uri_ != &::google::protobuf::internal::kEmptyString) {
    delete uri_;
  }
  if (admin_tenant_name_ != &::google::protobuf::internal::kEmptyString) {
    delete admin_tenant_name_;
  }
  if (admin_user_ != &::google::protobuf::internal::kEmptyString) {
    delete admin_user_;
  }
  if (admin_password_ != &::google::protobuf::internal::kEmptyString) {
    delete admin_password_;
  }
  if (this != default_instance_) {
    delete protocol_;
  }
}

void KeystoneClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeystoneClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeystoneClient_descriptor_;
}

const KeystoneClient& KeystoneClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_OpenStack_2eKeystoneClient_2eproto();
  return *default_instance_;
}

KeystoneClient* KeystoneClient::default_instance_ = NULL;

KeystoneClient* KeystoneClient::New() const {
  return new KeystoneClient;
}

void KeystoneClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    port_ = 0u;
    if (has_protocol()) {
      if (protocol_ != NULL) protocol_->::cloudos::config::os::WebProtocol::Clear();
    }
    if (has_uri()) {
      if (uri_ != &::google::protobuf::internal::kEmptyString) {
        uri_->clear();
      }
    }
    if (has_admin_tenant_name()) {
      if (admin_tenant_name_ != &::google::protobuf::internal::kEmptyString) {
        admin_tenant_name_->clear();
      }
    }
    if (has_admin_user()) {
      if (admin_user_ != &::google::protobuf::internal::kEmptyString) {
        admin_user_->clear();
      }
    }
    if (has_admin_password()) {
      if (admin_password_ != &::google::protobuf::internal::kEmptyString) {
        admin_password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeystoneClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string host = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional uint32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_protocol;
        break;
      }

      // optional .cloudos.config.os.WebProtocol protocol = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_protocol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_protocol()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_uri;
        break;
      }

      // optional string uri = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_admin_tenant_name;
        break;
      }

      // optional string admin_tenant_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_admin_tenant_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_admin_tenant_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->admin_tenant_name().data(), this->admin_tenant_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_admin_user;
        break;
      }

      // optional string admin_user = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_admin_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_admin_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->admin_user().data(), this->admin_user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_admin_password;
        break;
      }

      // optional string admin_password = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_admin_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_admin_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->admin_password().data(), this->admin_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeystoneClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->host(), output);
  }

  // optional uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // optional .cloudos.config.os.WebProtocol protocol = 4;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->protocol(), output);
  }

  // optional string uri = 6;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->uri(), output);
  }

  // optional string admin_tenant_name = 8;
  if (has_admin_tenant_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->admin_tenant_name().data(), this->admin_tenant_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->admin_tenant_name(), output);
  }

  // optional string admin_user = 10;
  if (has_admin_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->admin_user().data(), this->admin_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->admin_user(), output);
  }

  // optional string admin_password = 12;
  if (has_admin_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->admin_password().data(), this->admin_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->admin_password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeystoneClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // optional uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // optional .cloudos.config.os.WebProtocol protocol = 4;
  if (has_protocol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->protocol(), target);
  }

  // optional string uri = 6;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->uri(), target);
  }

  // optional string admin_tenant_name = 8;
  if (has_admin_tenant_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->admin_tenant_name().data(), this->admin_tenant_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->admin_tenant_name(), target);
  }

  // optional string admin_user = 10;
  if (has_admin_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->admin_user().data(), this->admin_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->admin_user(), target);
  }

  // optional string admin_password = 12;
  if (has_admin_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->admin_password().data(), this->admin_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->admin_password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeystoneClient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string host = 1;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional .cloudos.config.os.WebProtocol protocol = 4;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->protocol());
    }

    // optional string uri = 6;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string admin_tenant_name = 8;
    if (has_admin_tenant_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->admin_tenant_name());
    }

    // optional string admin_user = 10;
    if (has_admin_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->admin_user());
    }

    // optional string admin_password = 12;
    if (has_admin_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->admin_password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeystoneClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeystoneClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeystoneClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeystoneClient::MergeFrom(const KeystoneClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_protocol()) {
      mutable_protocol()->::cloudos::config::os::WebProtocol::MergeFrom(from.protocol());
    }
    if (from.has_uri()) {
      set_uri(from.uri());
    }
    if (from.has_admin_tenant_name()) {
      set_admin_tenant_name(from.admin_tenant_name());
    }
    if (from.has_admin_user()) {
      set_admin_user(from.admin_user());
    }
    if (from.has_admin_password()) {
      set_admin_password(from.admin_password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeystoneClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeystoneClient::CopyFrom(const KeystoneClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeystoneClient::IsInitialized() const {

  if (has_protocol()) {
    if (!this->protocol().IsInitialized()) return false;
  }
  return true;
}

void KeystoneClient::Swap(KeystoneClient* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    std::swap(protocol_, other->protocol_);
    std::swap(uri_, other->uri_);
    std::swap(admin_tenant_name_, other->admin_tenant_name_);
    std::swap(admin_user_, other->admin_user_);
    std::swap(admin_password_, other->admin_password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeystoneClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeystoneClient_descriptor_;
  metadata.reflection = KeystoneClient_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace openstack
}  // namespace config
}  // namespace cloudos

// @@protoc_insertion_point(global_scope)
